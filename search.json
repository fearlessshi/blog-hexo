{"title":"浅谈B+树","date":"2019-09-28T17:15:40.000Z","url":"/talking-about-bplus-tree.html","tags":["数据库","数据结构"],"categories":["折腾记录"],"content":"前言B+树（B Plus Tree）是MySQL数据库索引的底层数据结构，B+树也是一种平衡树和AVL树以及红黑树有着同样的性能，不用你说，我知道你肯定又个疑问，为什么数据库要使用B+树作为数据库索引而不是其他平衡树呢？为什么需要使用B+树呢？或许看完这篇文章你应该就懂了。其他结构的问题数据库索引作为数据库中的重要组成部分，同时也是数据库性能的重要指标，数据库是索引必须拥有较好的性能，这包括执行效率（时间）和内存消耗（空间），在执行效率方面，我们希望通过索引，查询数据的效率尽可能的高；在存储空间方面，我们希望索引不要消耗太多的内存空间。在以上的需求下，支持快速增删改查的数据结构除了B/B+树大概还有以下几种：哈希表（Hash Table）跳表（Skip List）二叉搜索树（Binary Search Tree）红黑树（Red-Black Tree）平衡二叉树（AVL Tree）首先看下哈希表，哈希表拥有O(1)的增删改查的性能，乍一看似乎是最适合作为数据库索引的数据结构。但是，数据库索引不止能等值索引还需要支持范围索引，而哈希表并不能提供范围索引的功能，所以哈希表不能胜任。接着是跳表，跳表之前的文章介绍过了，这里就直接说它的理由吧，跳表的空间复杂度是O(nlogn)相比其他平衡结构差，而数据库需要应对的是大量的数据，需要大量的内存和磁盘空间，所以一般不采用跳表作为数据库索引的数据结构。二叉搜索树在极端条件下会退化成链表，造成数据库性能不稳定的情况，而其他平衡树拥有更稳定的性能，所以不会使用二叉搜索树。AVL树都是一种极为成熟的平衡树结构，维护AVL树的平衡是非常耗时的，AVL树适合用于插入删除次数比较少，但查找多的情况。而数据库有可能进行频繁的插入删除操作，所以不适合。红黑树似乎是和B/B+树一样适合作为数据库索引的，但是为什么MySQL不使用红黑树而是采用B+树呢？首先红黑树并不太适合范围查找，还有其他的就在下面说明吧。B+树B+树是什么样子的呢？首先为了支持范围查找，二叉树需要进行一些小改造：把数据都移到叶节点中，上层树结构只存储下层的索引。思路类似于跳表，但是上层索引使用的是树结构而不是链表结构。除了执行效率和内存消耗的考虑，数据库索引还需要考虑其他一些东西：在海量的数据中索引应该存在哪？有些同学可能会说内存啊，但是内存真的能存下海量的数据索引吗？假如我们要存储10亿个字段，每个索引12B则叶节点大概需要11G，整个索引树内存占用不大于20G。20G对于一台服务器已经是不小的压力了，所以，为了节省内存，如果把树存储在硬盘中，那么每个节点的读取（或者访问），都对应一次磁盘IO操作。树的高度就等于每次查询数据时磁盘IO操作的次数。而磁盘IO操作又极为耗时，所以为了减少磁盘IO操作则二叉树需要进行改造，将层高减少，即使用N叉树。这样的结构就可以减少对磁盘IO的操作次数，同时又保留了高效的增删改查效率，而这种结构就是B+树，数据由叶节点的指向，索引中在保留key，节省内存。这时有人就会问这个N要设置为多少为才是最好的？我们知道磁盘是按一定大小读取数据块的，这个大小是一个固定值，通常是4KB，装系统中常说的4K对齐其实就是设置数据块的大小，为了防止读取一个B+树节点的时候多次操作磁盘，同时最大化的利用每个数据块，B+树的每个节点应尽量充满整个数据块，通过计算就可以得出N的大小。B+树是如何维持平衡的呢？说了这么多，那B+树作为一种平衡结构肯定有一种方式来维持平衡，在跳表中是随机高度，在平衡树中一般是采用左右旋的方式维持平衡，那么B+树又是如何呢？当数据量庞大的时候势必会造成某个节点的大小超过数据块的大小，如何很好的解决这种问题？没错就是分裂，将一个节点分成两份，这样每一份就都小于数据块的大小了，就能保证每次读取一个节点只需要一次磁盘操作了。那分裂又是如何进行的呢？我们知道叶节点才是存储数据的节点，其他上层节点只存储了key，但叶节点过大的时候节点进行分裂，分裂后数据的位置就不同了，所以还需要更新上层索引，当上层索引过大的时候就需要同叶节点一样分裂，直到分裂到根节点。删除的时候就和分裂相反，当某个数据删除后节点中的数据数量少于某个特定的阈值的时候（通常是N/2）就需要与兄弟节点进行合并，合并后同样需要更新上层索引，若合并后节点过大的时候就应该同插入一样进行分裂，直到两个节点的大小处于合理的范围之中。总算更完这篇文章了，溜了溜了。插图看看吧，有空再画 （逃"},{"title":"VSCode Java输出中文乱码问题解决","date":"2019-09-28T17:12:55.000Z","url":"/vscode-java-output-chinese-garbled-problem-solving.html","tags":["Java","VSCode"],"categories":["折腾记录"],"content":"这个问题似乎已经修复了，将所有的编码改成UTF-8或者保持默认设置就可以正常的显示中文了。由于服务器崩溃，导致图片丢失，博主将会在不久后恢复这些图片。本文适用于Windows，Linux中应该不会出现这种问题。前几天由于要写OJ题我又打开了尘封已久的VSCode Java工作区，使用过程中遇到了中文乱码的问题，照理说应该是不会出现这种问题的，因为我当初在配置Java环境的时候就已经解决了中文乱码的问题。然后一直懒得修，直到今天有空。博主我原先是将JDK的编码和Java文件的编码都设置为GBK，这样在运行的时候就不会出现中文乱码的问题，不知从那个版本开始这种方式就不可行了，于是只能重新的测试。测试用的代码如下：launch.json的配置如下：这是原本的解决方案，运行后可以看到中文（你好世界）并没有输出：通过chcp命令查询字符集，发现终端的字符集使用的是UTF-8：将字符集全部java文件的编码和launch.json的encoding更改为UTF-8后出现乱码：这个编码是UTF-8转为GBK造成的，如果我们将文件更改为GBK编码呢？从上面可以看到终端正确输出了中文，但是这个方案并不是很好，如果你需要将代码转移到Linux等基于UTF-8编码的系统中就会发现代码需要重新转编码才能继续使用，那如果我们将文件设置为UTF-8编码，而encoding设置为GBK呢？可以看到终端也成功出现了中文，而文件也不用更改为GBK编码，上传到Git上或者Linux系统中就不会出现乱码的问题了。注意：如果console设置为internalConsole则需要使用第一种方式，即文件使用GBK，encoding设置为UTF-8。"},{"title":"浅谈跳表","date":"2019-09-14T14:51:29.000Z","url":"/talking-about-skip-list.html","tags":["数据结构"],"categories":["折腾记录"],"content":"为什么使用跳表跳表是（skip list）Redis实现sorted set使用的数据结构，是一种平衡数据结构，其中常用的数据结构有：B树，AVL树，红黑树等，如果你了解过这些平衡结构，你或许会有个疑问，为什么要使用跳表？想象一下，给你一支笔，一张纸，一个编辑器或者IDE，你能在短时间内写出一个红黑树或者AVL树？这很难吧。而跳表，我们只需要对链表稍加改造就可以支持快速增删改查，使用类似于二分搜索的查找算法，而这种数据结构就是跳表。它的效率和红黑树以及AVL树不相上下。什么是跳表首先我们先来看一个链表：对于这种链表来说，即使链表之中是有序的，如果我们要从中查找某个值，也只能从头逐个查找，运气好的话查找一次就能找到，运气差的话或许要查找n次。在使用数组存储的方式中我们可以通过二分搜索来快速的查找某个值，而链表由于不支持随机查询，所以就不能使用二分搜索的方式来查找。那么如何能提高查找效率呢？在O(n)的时间复杂度下如果要提高运行效率，二分是必不可少的，树结构可以通过左右子树来分区，那链表又如何分区呢？建立索引，我们对这个链表加上一层索引。假如我们要查找6，只需要走1-&gt;3-&gt;5-&gt;6，减少了2步，那如果我们再加几层索引呢？这时的查找其实就是二分查找了，查找效率已经有质的提升。而这种的原理其实很简单就是通过分区来跳过大量的节点。上面所说的结构是静态的，当我们向上方的跳表中不断加入数据，如果不更新索引就有可能出现某节点之间出现大量节点的情况，在极端的情况下还会退化成链表。而如果在插入的时候重建索引那势必会导致跳表的插入效率大幅下降。那要如何解决动态插入的问题呢？在红黑树和AVL树中是使用左右旋来平衡二叉树，而跳表同样也有一种机制来平衡：通过随机函数来是插入的节点的层高是随机的，不强制要求1：2的分区。如，我们要在以下的跳表中添加一个值为18的节点：首先我们需要通过一个随机函数来得出新节点的层高。假设在这次插入中得到的层高是3然后搜索到插入的位置。最后将节点插入并重新设置指针，从上一张图中我们可以看到游标走了所有的层，而游标在游走的时候就可以记录层信息，就可以重设指针了。简单分析跳表效率从上面图中我们可以知道，大致每两个结点会抽出一个结点作为上一级索引的结点，那第一级索引的结点个数大约就是n/2，第二级索引的结点个数大约就是n/4，也就是说，第k级索引的结点个数是第k-1级索引的结点个数的1/2，那第k级索引结点的个数就是n/(2k)。那么假设层数足够高，即最高层只有两个节点，那么可知n/(2k)=2，即k=log2n-1，若把原始链表计算在内那k=logn，若每次查找都要下降m层的时候，那在跳表中查询一个数据的时间复杂度就是O(m*logn)。而m可以认为是参数，所以跳表查询一个数据的时间复杂度就为O(logn)。说完时间，那么我们来说说空间，比起链表和二叉树，跳表需要多个指针域，肯定需要比链表和二叉树多许多空间。若我们两个节点就提升一层，那需要的索引数量就为n/2+n/4+n/8+…+2，即n-2，所以可以知道跳表所用的空间复杂度为O(n)，看起来似乎很大？但是我们需要考虑原始链表中数据存储的大小，若数据的大小很大，那么索引使用的空间就微不足道了。实现代码忘记附上代码了，逃结语跳表的时间复杂度是O(logn)，空间复杂度是O(n)，虽然不如平衡树来的“高效”，但是跳表的实现非常灵活，可以有效的平衡执行效率和内存消耗，并且实现起来也比平衡树容易，所以多数情况下跳表会是比平衡树更好的选择。"},{"title":"浅谈数据库索引","date":"2019-09-07T14:53:01.000Z","url":"/talking-about-database-index.html","tags":["Mysql","数据库"],"categories":["折腾记录"],"content":"提起索引我想你应该不陌生，当我们查阅一本大部头的时候我们应该如何快速的找到想要的内容呢？很简单，先找目录，通过目录我们就可以了解到我们要找的内容在书中的什么地方，而这个目录就担任着索引的功能。相同，数据库为了能快速的寻找到指定的数据必须要建立索引。对于少量的数据，没有合适的索引影响不是很大，但是，当随着数据量的增加，性能会急剧下降。几种常见的索引数据模型有序表最简单的方式就是有序线性表的存储方式，而这种方式包含了两种存储类型，分别是数组和链表。有序数组(Array list)在等值查询和范围查询的情景下性能非常优秀，但是当我们需要在这之中插入数据的时候就需要将后方的数据全部进行移动，成本非常高，所以一般只适用于静态存储引擎。而另外一种有序链表(Linked list)，在增加删除插入的场景中性能表现优秀，但是在查询的场景中就不太合适，但是我们知道对有序表的查询一般采用二分搜索，而这个二分搜索是通过分区的方式来提高查询效率，如果我们为有序链表建立分区索引，那有序链表的查询效率就能达到O(logN)，这也是Redis的有序集实现方式跳表(Skip list)，关于跳表的内容这里就不说了，有兴趣的请自行查阅。哈希表除了有序集的方式还能通过无序集的方式来作为索引，哈希表(Hash table)，哈希表是通过计算key的散列值从而定位value在数组中的位置来进行查询的，不可避免地，多个key值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。而哈希表由于是无序的所有只适用于等值查询的场景， 比如Memcached及其他一些NoSQL引擎。树除了集合的方式还有二叉搜索树这种方式，二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。而磁盘的读取时间并不快，当树高20的时候数据库就有可能读取20个数据块，所以为了尽可能的减小磁盘的读取次数，则不应该使用二叉树，转而使用N叉树，N叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。如MySQL的InnoDB和MyISAM。数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。InnoDB的索引模型在MySQL中，索引是在存储引擎层实现的，所以有多种不同的索引，即使索引使用同一类型的的索引，工作方式也可能会不一样。而在MySQL中主要是使用InnoDB，所以这里就来分析InnoDB的索引模型在InnoDB中，索引使用的是B+树作为索引结构，根据叶子节点的内容，索引类型分为主键索引（聚集索引 Clustered index）和非主键索引（辅助索引 Secondary index）。主键索引的叶节点中存储的是表中的行数据，非主键索引中的叶节点存储的是主键的值而不是地址。当我们使用主键索引对表中的数据进行检索时，就可以直接得到行数据，而不用进行二次检索。而使用非主键索引进行检索时，我们得到的是主键的值，当我们查询的列不只有主键的时候，就需要通过搜索到的主键值再到主键索引中搜索一次，这种过程被称为回表。通过上面的说明我们知道非主键索引存储的是主键的值，所以当主键的值占用的空间越小，非主键索引就能越小，需要读取的数据块就有可能越小，所以在创建数据表的时候应该选择一个合适的字段作为主键，或者使用自增主键。InnoDB索引策略覆盖索引举个例子说明比较容易理解，假设有一个people表，表中有id和name两列都是索引，id为主键，当我们执行以下查询SELECT id FROM people WHERE name=otstar;的时候，InnoDB会去name索引中寻找主键即id，而我们要查询的值id已经在name的索引中存储了，所以不需要回表，由于在非主键索引中的查询覆盖（满足了）了查询请求，所以称为覆盖索引，由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。联合索引联合索引就是创建一个支持两种或以上字段比较的索引，比如name,age的联合索引，当我们查询SELECT id,name,age FROM people WHERE name=otstar AND age=18;的时候就只需要再name,age中直接查询，而不再需要回表。从而提高查询效率和减少开销。最左前缀原则从名称中就可以看出，最左优先，如当创建了一个name,age的联合索引，就相当于创建了name的单索引和name,age的多索引，这时我们就没必要再去创建name的单独索引，但是如果需要age也是索引则需要另外创建一个age的单索引。那有这种特性的出现有要如何排序联合索引呢？当我们将一个索引放置到左边的时候可以减少创建一个索引的时候我们就应该优先考虑这种情况，还有一种是空间，name字段一般是比age字段大的，如果我们创建age，name的联合索引，当我们需要name的单独索引的时候，就需要创建name的单独索引，而创建一个name的索引对存储的开销比age大。简单的比喻下，如name的索引占用2空间，age占用1空间，则name,age+age的索引占用4空间，而age,name+name则需要占用5空间。索引下推假设有一个包含id,name,age,nikename的people表，id为主键索引，name,age为联合索引，当我们执行SELECT * FROM people WHERE name LIKE &#39;o%&#39; AND age=18 AND nikename=otstar;，依照最左前缀原则，这句查询只能使用name单索引查询，而不能使用name,age的双索引查询，因为还有一个nikename字段需要匹配，所以当查询到符合name的查询的时候，在MySQL 5.6之前就只能拿id的值去回表看看其他字段是否匹配，而5.6之后引入了索引下推，也就是把age字段也加入索引，当name匹配后就可以一并对age进行判断，而不用连age字段都要回表比较，这时候就可以减少不少的回表次数。结语在满足语句需求的情况下， 尽量少地访问资源是提高数据库性能的一大关键，理解索引的原理，我们才能不浪费性能或资源，提高数据库的效率，从而提高程序的运行效率。"},{"title":"MySQL事务隔离","date":"2019-09-05T15:06:22.000Z","url":"/mysql-transaction-isolation.html","tags":["Mysql","数据库"],"categories":["折腾记录"],"content":"事务（Transaction）是由一系列对系统中数据进行访问与更新的操作所组成的一个程序执行逻辑单元。 或许这么说你可能难以理解，那我们举个经典例子来说明事务的用途吧：用户A向用户B转账，我们需要进行以下操作：从A账号中把余额读出来。对A账号做减法操作。把结果写回A账号中。从B账号中把余额读出来。对B账号做加法操作。把结果写回B账号中。在这些操作中需要保证这些操作是一体的要么都成功做完，要么都不成功。 为了解决这种问题这也就是事务诞生的背景。ACID特性数据库事务拥有以下4大特性： 原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）1. 原子性原子性是指事务是一个不可再分割的工作单元，事务中的操作要么都发生，要么都不发生。简单来说就是操作成功了就成功了，一旦操作失败了就会放弃事务中已经执行的操作，回到事务刚开始的状态。2. 一致性一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。这是说数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。一致性就是说不管操作是否成功，总的数据不会发生改变，即A给B转账，A和B的总金额不发生变化。3. 隔离性多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。如果A在转账1亿给B（事务1），同时C又在转账3亿给A（事务2），不管事务1和事务2谁先执行完毕，最终结果必须是A账户增加2亿，而不是3亿，B增加1亿，C减少3亿。事务最复杂问题都是由事务隔离性引起的。完全的隔离性是不现实的，完全的隔离性(序列化)要求数据库同一时间只执行一条事务，这样会严重影响性能。4. 持久性这是最好理解的一个特性：持久性，意味着在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。（完成的事务是系统永久的部分，对系统的影响是永久性的，该修改即使出现致命的系统故障也将一直保持）隔离性和隔离级别隔离性隔离性是通过锁实现的，当一个事务对某项数据进行更新操作的时候就会对数据加锁，从而防止其他事务对该数据的影响，锁的级别一般有3种，全局锁，表锁，行锁，MySQL中的InnoDB支持以上的三种锁，MyISAM不支持行锁。锁获取的时机是事务执行的第一句才开始锁住数据的，并不是在数据开启的时候获取的，当事务提交成功后才会释放锁。隔离级别隔离级别有4种从低到高分别是读未提交（Read uncommitted）、读提交（Read committed）、重复读（Repeatable read）、序列化（Serializable）。读未提交（Read uncommitted）从名称中就可以看出，读 未提交，即一个事务可以读另一个事务未提交的数据，简单来说就是一个事务修改了某个数据当它还没提交的时候，另一个事务读取该数据的时候会读取到修改后的数据，即使修改的事务还没有提交。这种隔离级别解决了更新丢失，一事务写时其他事务可读不可写。读提交（Read committed）从名称也可以看出来，读 提交，一个事务要等另一个事务提交后才能读取数据，即事务期间独占数据，其他数据不能对该数据进行读写操作。这种级别解决了脏读和更新丢失，一事务写时其他事务不可读写。重复读（Repeatable read）这个从名称应该是无法看出来了，重复读即一个事务重复读的数据是相同的，就是当一个事务对数据进行读操作的时候其他事务不能对其进行修改但可读。这种隔离级别解决了脏读，更新丢失和不可重复读，一事务读时其他事务可读不可写。序列化（Serializable）这是最高的隔离级别，所有的事务只能一个接一个的执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。简单说一下事务的问题更新丢失：当事务1更新失败时会回滚数据，而在回滚之前事务2若成功更新数据，则事务2更新成功后的数据会被回滚覆盖，造成更新丢失。脏读：当事务1读取了事务2未提交的数据，而事务2若失败回滚数据了，则事务1读取到是数据就是无中生有的数据，即脏数据不可重复读：事务1读取某个数据后，事务2对其做了修改，当事务1再次读该数据时得到与前一次不同的值。幻读：事务1读取在读取某范围数据时，事务2插入一条数据，当事务1再次数据这个范围数据时就不一样了，出现了一些幻数据简单整理一下各种隔离级别可避免的问题更新丢失脏读不可重复读幻读读提交（Read committed）避免读提交（Read committed）避免避免重复读（Repeatable read）避免避免避免序列化（Serializable）避免避免避免避免"},{"title":"算法复杂度分析(1)","date":"2019-08-28T09:10:03.000Z","url":"/algorithm-complexity-analysis-1.html","tags":["算法"],"categories":["折腾记录"],"content":"为什么需要算法复杂度分析，实际运行一遍然后收集运行的信息和统计不就可以了？这总事后分析的方法确实没有错，但是当环境发生变化，数据量发生变化，或者数据模型改变了，程序的执行效率就有可能发生巨大的改变，所以我们需要一种粗略的，不需要具体测试数据的估算程序执行效率的方法，而这种方法就是复杂度分析。大O复杂度表示法大O表示法是一种特殊的表示法，指出了算法的速度有多快或者多慢。谁在乎呢？实际上，你经常要使用别人编写的算法，在这种情况下，知道这些算法的速度大有裨益。这里我们拿一段代码来进行解释：这段代码是用来求数列和的，我们把每一句代码执行的时间记为1u，然后默认每句基础代码执行的时间都是一样的，从上面的代码我们可以看出，int num = 0;和int i = 1;各执行了1次，sum = sum + i;和i++各执行了n次，return部分我们不看，那么这个函数所执行的总时间就应该是(2n+2)*1u，我们把总时间记为T(n)那么，可以看出执行的总时间和n成正比关系，即和执行次数成正比关系，而这种规律我们可以总结成一个公式即:T(n) = O[f(n)]而上一个公式就可以表示成T(n) = O(2n+2)，当n到大一定程度的时候我们就可以把+2和n的系数2给忽略掉，这时候的T(n) = O(n)，这就是我们常说的O(n)时间复杂度或O(n)空间复杂度的由来。时间复杂度分析那么当代码越来越长，越来越庞大是时候难道还这样一步步分析吗？当然不是，当我们对算法或者程序进行分析的时候我们只需要关注以下几点即可：1. 只关注循环次数最多的代码还是拿上面一段代码来分析。从代码中我们可以看出，只有一个循环n次的for循环，而其他部分的代码只执行了一次，这时我们就可以直接忽略掉那些只执行一次的代码，只关注执行最多的代码，即for循环中的代码，所以这个函数的时间复杂度就是O(n)。2. 加法法则：只关注执行次数最多的代码的时间复杂度从上面的代码我们可以看到4个for循环这时候应该如何判断呢？首先我们先找出它们各自循环了几次，第一个执行了10次，第二个执行了n次，第三个执行了10n次，第四个执行了n2次，这时候我们只需要关注执行最多的那个循环的复杂度即可，即第四次（我们均默认n很大），所以这段函数的时间复杂度为O(n2)。3. 乘法法则：嵌套代码的时间复杂度等于嵌套内外的时间复杂度的乘积从上方代码看出，fun函数中的for循环每次循环都需要调用一次cal函数，而我们可以很轻松的判断出cal函数的时间复杂度是O(n)，而fun一共需要调用n次cal函数，即O(n)  O(n)，即O(nn)，简化下就是O(n2)。到这里我们就基本讲完了时间复杂度的分析方法了，下面我们就来看以下几种常见 的算法时间复杂度。番外：常见的时间复杂度1. O(1)这个时间复杂度并不是表示只有一句基础代码，而是代表常数的时间复杂度，即使你有100句基础代码也不能表示为O(100)，而应该表示为O(1)。2. O(logn), O(nlogn)对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。 我这里就拿算法图解这本书中的一张图来说明：来自《算法图解》我们要得到一张16格的纸，如果采用对半折的方式就只需要4次就能完成，即4 = log216若把4换成T(n)，16换成n，我们就可以得到T(n) = O(log2n)，然后我们忽略掉常数的底数，就变成了O(logn)，并不是只有2才能忽略掉底数，所有的常数底数都可以被忽略。3. O(m+n)、O(m*n)或许你有看过这种复杂度，或许没有看过，这种其实非常简单，我们通过下面的例子来进行分析：当我们看到这个函数的时候是不是就应该通过加法法则排除掉一个呢？然后你会发现若不知道m和n的大小关系根本无法对其进行判断，也就无法排除掉其中的一项，这时候就应该保留两个未知数，即O(m + n)，另外的O(m * n)同理。空间复杂度分析空间复杂度的分析十分的简单，我们直接通过一个例子来进行分析吧：这段例子非常简单，就是创建了一个大小为n的数组，所以这段代码的时间复杂度就是O(n)。结语复杂度的分析其实不难，只要多练习，多分析就能熟练的掌握它，还有最好时间复杂度，最坏时间复杂度，以及平均时间复杂度等一些分析我留着下一篇在说吧，零零散散的写了一篇文章，还是挺累的，完全手打了2300+个字，其实是懒 （逃，(￣y▽,￣)╭ 。"},{"title":"一年来的经验总结","date":"2019-08-26T13:22:46.000Z","url":"/summary-of-experience-over-the-past-year.html","tags":["总结"],"categories":["站长杂谈"],"content":"自从进入大学已经接近一年的（还差几天），这一年中我从一个什么都不知道的小白变成了一个了解不多的菜鸡，写过许多谜之代码也写过几个垃圾项目，学过许多古董技术也用过一些神奇的东西或框架，这一年来我走过了不少弯路，浪费了不少时间，写这篇文章的目的是为了总结一下这一年的来走过的路和一年来的经验，调整我的方向。也希望能给访客们带来启发。本文的主观性很强，若有不足和不妥之处请多包涵，有不明白的地方或者可以改进的地方请在下方留言。我选择计科的原因说起原因的话不得不提高二的时候，那时候还没有推出无限量的流量套餐，作为一个住校生肯定会搜寻附近是否有开放的网络，那时候还用着酷派的大神F2，信号很好，可以连接到一楼的开放WIFI，后来被盗了然后找同学买了部大神Note3，却发现信号很渣，于是乎买了个香橙派来中继，然后接触到了Linux，Web和WordPress，逐渐的发现对这些非常感兴趣，期间也折腾了HTML/CSS，但只停留在爱好的阶段。后来毕业了选专业，看着列表上乱七八糟的专业才发现还是软工比较适合我，但是没得选，后来听说了计科和软工差不多后选择了计科。我一年来的学习历程开学后我知道了要学习哪些课程，其中的编程课是C语言，作为一个喜欢先行出发的折腾怪，我就打算早在同学之前完成部分课程的学习，当时原本是打算看书来学习的，后来发现我的学习方式并不适合看书，当初啃书的时候是非常痛苦的，啥都不懂，看着书上那堆乱七八糟的东西一愣一愣的，3天看了还不到20页，于是经过一些考虑后我选择了看视频学习，一开始不知道去哪找资源，经别人推荐去了网易云课堂随便找了一个视频教程学习，照着视频我学了C的基本语法，条件语句，循环语句，以及数组等基础的知识。对了，当初我使用的编辑器并不是古老的VC6也不是CodeBlocks更不是Dev C++，而是Visual Studio Code，当初用这个编辑器的原因是因为用习惯了，至于怎么用习惯的那又是另一个故事了，但是作为一个过来人，我极其不推荐使用VC6,CodeBlocks,Dev C++等古老的编辑器，现在的大学课堂总是喜欢简单粗暴的教学生们装一个VC6，美其名曰“我当年还用XXX的编辑器写XXX”，要说为什么不推荐使用这些编辑器的原因是它们对新手都不友好，没有代码高亮，没有补全，连报错都是乱七八糟的，调试更不用说。为什么需要这些？因为什么都没接触过的小白想要学好这门技术首先需要的是信心和兴趣的搭建，而一个快捷方便的编辑器（可以是VSCode，VS等现代的IDE[编辑器]），可以使他们不会因为一些小错误而对编程丧失信心和学习的兴趣。在过去的一年中我为我的大部分舍友安装了VSCode，并教他们如何使用，实际使用下来他们的确在用VSCode的阶段（学C的阶段）中表现得不错，后来学Java使用了Eclipse（没像我这么固执，其实是我实在用不惯Eclipse）拉回正题，C的前面部分学习还算顺风顺水，因为我有写过PHP，PHP和C的语法还是非常像的，直到遇到了指针和结构体。指针和结构体可以说是学习C的一大拦路虎，好在最后还是靠着Google的帮助学会了。后来学习了Java和汇编这些就不谈了，有了C的基础学习起来就只是思想转换的问题了。个人的经验之谈在大一，我学习了C，Java，PHP，JS和一些相关的框架，但都只学了皮毛，并没有去深究它们，大一重要的是打开视野，而不是去深究某项技术，更不是从底层学起，也不是沉迷于刷题无法自拔。学会腾出时间去了解目前互联网是如何如何，大咖们都在关注什么，寻找自己喜欢什么，想学什么，了解如何通过互联网快速寻找到你想要的答案。如果可以请到墙外看看，看看世界上正在发生什么，程序员之间是如何协作的。学会利用好Github，Stackoverflow，MDN，甚至是Google等网站。比起刷OJ我更推荐你去找一个小项目，试图去读懂它，了解它，模仿它，甚至是改进它优化它，你会发现在这之中学到的知识远比刷100题OJ来的多。然后试着去写个项目，当你写项目遇到问题时，你才会真正的去思考要如何解决问题，当你在项目中遇到如线程，进程，并发，异步，同步等问题的时候，你自然而然的会去思考进而学习相关的知识，当你把这之中的问题都逐一找到答案的时候，那种成就感和兴奋感是无可比例的。当你发现你的程序运作起来很慢的时候，你自然而然的会去想如何优化它进而去学习算法，优化的方法。学习编程不是填鸭式的学习，驱动式学习才是学好的关键。在我看来，在编程这条路上这些最好不要做：不格式化代码，随性的编写代码，一行当成100行使用不参考最佳规范，不看优质代码什么问题都喜欢问他人，不去学习如何独立的解决问题喜欢把所有的代码写在一个主函数中不管学什么都要买一本书，或者捧着一本大部头，试图线性的从头看到尾在我看来，你应该学习的或者应该去做的:学会使用Github学会如何使用搜索引擎（这里不推荐使用百度，如果用不了Google也请用Bing或者第三方搜索引擎）学会对知识进行输出（建一个博客或者去一个优质平台把自己学到的知识写成文章）学会如何寻找学习的资源学会使用一个好的开发工具（编辑器，CI等）学会阅读（文档，文章，代码等）结语首先感谢你能看到最后， 或许这篇文章并不能给你带来什么，但我们有缘一起走上一程，望各位都能有好的成就。很多建议是我从各类消息源阅读收集而来，由于有的时间久远无法一一寻找 ，在此统一表示感谢 。感觉还没写完，所以还会添加一些内容ԅ(¯ㅂ¯ԅ)"},{"title":"Acrylic - VSCode Extension","date":"2019-07-19T13:28:26.000Z","url":"/vscode-acrylic.html","tags":["VSCode"],"categories":["分享推荐","折腾记录"],"content":"为VSCode添加 Acrylic 或者其他效果前言前几个星期一张带毛玻璃效果的VSCode的图片进入了我的视线，后来搜索了相关的设置教程发现只有MacOS才能启用这种效果，作为一个折腾青年，后来通过使用了ewc，VSCode确实增加了 Acrylic 的效果，但是并不能使整个编辑器获得Acrylic（第一次尝试是使用和 GlassIt-VSC一样的方式，即通过JS调用Powershell为VSCode窗口增加效果），可能是CSS没有写好，也可能是该方法不适用，反正最后放弃了折腾。直到昨天看到了 vscode-vibrancy ，该扩展使用的是Acrylic效果，Acrylic效果虽然美观但是会出现拖动延迟的问题，而Blur效果和Acrylic相近并不会产生拖动延迟，于是便打算将 ewc （支持Acrylic和Blur等效果）通过 vscode-vibrancy 的方法加载进VSCode，于是便有了这个扩展。支持的系统Windows10 ✔使用方式安装该插件 Visual Studio Code Marketplace切换到任何的暗色主题，因为Acrylic效果和Blur效果在亮色主题下表现不佳按F1键运行“Enable Acrylic ”重启VSCode运行“Enable Acrylic”时VSCode应使用管理员权限运行卸载方式按F1键运行“Disable Acrylic ”FAQs为什么不支持MacOS？vibrancy插件已经实现了MacOS下的vibrancy效果，没必要重复写插件，并且MacOS下的效果和Windows下的效果并不同。为什么要制作这个插件？请看前言相关链接Visual Studio Code MarketplaceGithubIntroductionThinksvscode-custom-cssvscode-vibrancyewcRenderAcrylicBlurBehindTransparentGradient"},{"title":"ace编辑器设置惯性滚动","date":"2019-05-11T08:21:19.000Z","url":"/ace-editor-sets-inertial-scrolling.html","tags":["JavaScript","Mobile"],"categories":["折腾记录"],"content":"上个月我写了XK Editor这个项目，使用了ace编辑器和tinymce编辑器作为基础编辑器，但是当项目进入适配移动端的时候，遇到了一个很头疼的问题，ace编辑器不支持惯性滚动，用起来会非常变扭，于是便为之增加惯性滚动的功能。原理惯性滚动，即在触屏设备中滑动手指，当手指离开屏幕后，滚动事件并不会立即停止，而是会继续移动一段距离，这段距离是由手离开屏幕时的滚动速度和预设的摩擦力决定的，通过这时的速度，预设的摩擦力和特定的公式计算出一系列滚动点，然后逐个滚动到滚动点，来模拟惯性滚动。实现方案监听开始触摸的事件，记录开始的时间和开始的坐标，同时重置滚动(防止连续滚动出现Bug)监听触摸结束的时间，记录结束的时间和结束的坐标通过公式v = (endY - startY) / (endTime - startTime) * 1.5 1.5的值可以调整定义“摩擦力”deceleration = dir * 0.0018 0.0018也可以调整在每次微滚动前都计算一下滚动的坐标，然后进行滚动。直至速度为0或者速度方向改变的时候停止滚动实现代码"},{"title":"为apt方式安装的nginx重新编译增加WebDAV","date":"2019-05-05T17:34:15.000Z","url":"/recompilation-of-nginx-installed-for-apt-mode-adds-webdav.html","tags":["apt","nginx","WebDAV","编译"],"categories":["折腾记录"],"content":"由于机房装了还原卡，重启就会恢复磁盘，作为VSCode的重度使用者实在受不了Eclipse这个编辑器，并且大部分时间也并非在编写Java，所以博主搭建了code-server作为Cloud IDE，把开发环境放到了服务器上，但是当回到了宿舍使用自己的笔电的时候Cloud IDE就派不上太大的用场(Node除外，Node这东西实在太吃性能了)，于是同步就成了大问题，这时有人会说用Git，可惜Git并不具备实时性，在需要将服务部署在服务器上运行的时候操作就相对繁琐，所以就想到了挂载云端的文件到本地，然后SSH连接上服务器。--- 假装有分割线 —之所以选择webDAV是因为它基于HTTP，传输性能优于SFTP和FTP， 同时能够利用 HTTP 的各种扩展，比如 HTTPS，HTTP 2.0等等。选择Nginx作为webDAV的服务程序是因为其轻量化，同时也可以为PHP等服务。apt安装的Nginx自带了一个http_dav_module，但是为了让 nginx 能够支持 WebDAV 规范中的PROPFIND和OPTIONS，还需要安装模块 [nginx-dav-ext-module]() 。一、查看Nginx版本并下载对应源码包其中nginx version就是Nginx版本，前往下载对应的版本，并解压二、下载nginx-dav-ext-module进入nginx-x.x.x文件夹三、配置configure首先复制上方nginx -V命令得到的configure arguments，进入nginx-x.x.x文件夹，加入--add-module=./nginx-dav-ext-module参数运行后可能会有出现报错，一般是都是依赖不存在导致的，利用apt安装对应的依赖，后重新运行一遍configure即可，注意：依赖是一个个报错的，请确认没有报错的情况下进行下一步。以下是部分常见的报错和依赖的安装方法1. rewrite需要pcre支持./configure: error: the HTTP rewrite module requires the PCRE library2. http cache需要openssl./configure: error: the HTTP cache module requires md5 functions from OpenSSL library3. 安装libxslt./configure: error: the HTTP XSLT module requires the libxml2/libxslt libraries4. 缺少GD library./configure: error: the HTTP image filter module requires the GD library5. 安装GeoIP library./configure: error: the GeoIP module requires the GeoIP library四、编译Nginx首先安装编译工具开始编译，注意：执行make即可，不需要再执行make install编译完后新的nginx二进制运行文件就出现再objs文件夹下，接下来只需要复制到/usr/sbin即可先备份下然后复制新的nginx到/usr/sbin，并重启nginx五、配置WebDAV进入/etc/nginx/sites-enabled文件夹，新建一个conf文件，并使用以下配置文件接着重启nginx即可结语至此WebDAV就配置完成了，当时配置的时候就遇到了一大堆没有安装的依赖，依赖一个个跳出来，差点把我心态搞炸，好在最后还是编译成功了，上面的配置还有些问题，暂时还不支持移动和新建文件夹的操作，博主正在研究修复，请耐心等待(￣▽￣)”。"},{"title":"Java图实现","date":"2019-05-05T03:03:10.000Z","url":"/java-graph-implementation.html","tags":["算法","Java"],"categories":["折腾记录"],"content":"没有介绍，请自行百度或谷歌，代码经过了一定的测试，但不保证没有Bug。"},{"title":"Java二叉树实现","date":"2019-05-05T02:59:47.000Z","url":"/java-binary-tree-implementation.html","tags":["算法","Java"],"categories":["折腾记录"],"content":"这是一篇水文，逃，代码已经经过一定的测试，但无法保证没有Bug。介绍网上一大堆这里就不介绍了，直接放代码吧(￣▽￣)”"},{"title":"XK-Editor - 一个支持富文本和Markdown的编辑器","date":"2019-04-27T18:15:10.000Z","url":"/xkeditor.html","tags":["JavaScript","Editor","Markdown","Vue"],"categories":["折腾记录"],"content":"XK-Editor现已可从NPM安装。前言这个项目原本是为了升级 XK-Note 而创造的，后来因为功能的不断完善，逐渐的改成了可复用的组件。XK-Note原本是使用Editor.md的编辑器，使用起来也很不错，但是总有一些不如意的地方，于是便打算自己造个编辑器。XK-Editor基于Vue是因为双向绑定这个特性，同时也是模板语法，便于开发，之所以采用ACE编辑器其实是当时觉得CodeMirror太丑了，实际开发中ACE实在太难弄了，文档跟不存在一样，只能阅读源码来实现一些不常见的功能，同时也修补了Editor.md中一些不如意的地方，比如没有打字机模式，每次写到屏幕下方的时候总是要重新滚动，代码高亮不够漂亮，没有自动补全等等。。。又引入了Tiny MCE使得编辑器拥有了富文本编辑的功能。简介 IntroductionXK-Editor = Vue2.0 + Ace + TinyMCE;XK-Editor支持富文本编辑和Markdown，同时可以在Markdown和HTML互转，满足各种人的需求。特性 Feature[两种编辑器] 支持富文本编辑和Markdown编辑[两种格式互转] 支持Markdown和HTML互转[打字机模式] 支持打字机模式，编辑时无需使用鼠标滚轮，并可调节定位位置，满足各种屏幕和使用者的需求[下载] 支持导出下载Markdown和HTML格式的文件[即时保存] 支持即时保存到浏览器，无惧网络波动[移动端优化] 优化移动端的编辑体验，支持惯性滚动，并默认关闭实时预览[滚动绑定] 支持双向/单向滚动绑定，使预览能够跟随输入[树形TOC] 目录可折叠，不用再翻阅很久来定位[自定义主题] 支持自定义主题，可以通过替换CSS来更换显示样式[Emoji表情] 支持Github语法的表情:smile:[Task lists] 支持创建Task列表[TeX公式] 支持插入KaTex公式[流程图/时序图/甘特图] 支持mermaid语法编写各种图[解析HTML] 支持解析各种HTML标签，并支持过滤标签[独有的扩展语法] 支持通过[text]{style|label}的方式解析文字[自动补全] 支持语法自动补全[图片上传] 支持图片上传还有多种神奇的功能等待你的发掘。演示 DemoXK-Editor安装 Install从 NPM 安装你可以轻松将 XK-Editor 引入你现有的项目安装XK-Editor将XK-Editor static文件复制到项目根目录导入XK-Editor组件从本项目上构建首先clone本项目，或者前往Releases下载本项目并解压进入项目文件夹执行yarn或者npm install测试运行然后打开浏览器访问指定，如果能正常访问则可以进行下一步5. build将项目文件夹下的文件复制到网站目录即可组件方式使用首先clone本项目，或者前往Releases下载本项目并解压进入项目文件夹将static文件夹下的所有文件复制到Vue项目下的static文件夹下将src/utils和src/components下的所有问文件复制到Vue项目下的src/utils和src/components文件夹下导入XK-Editor组件在合适的位置调用组件所需依赖setting.json文档 DocWikiGithub求 star =￣ω￣=维护者 MaintainerXK-Editor 由 Otstar Lin和下列贡献者的帮助下撰写和维护。Otstar Lin - Personal Website · Blog · Github许可证 License根据 Apache License 2.0 许可证开源。渲染 Render结语首先感谢你能看到最后，同时感谢你对该项目的兴趣。 该项目虽然不大，大部分核心的部件也是使用现成的组件，但是对我来说也是一次良好的经验，也是我第一个完整的前端项目，所以难免会有Bug，若您在使用遇到了问题，请及时联系我进行修复，或者到Github上提交issue，我会尽快的处理，另外若您有其他好的建议或者有希望增加的功能，请联系我进行添加或者提交Pull Request。Coding最大的乐趣，不在Coding，而在Creating。 — Otstar Lin"},{"title":"JS生成列表树","date":"2019-04-19T15:51:16.000Z","url":"/js-generate-list-tree.html","tags":["JavaScript","目录树","递归"],"categories":["折腾记录"],"content":"上一篇文章我们使用PHP的构建简单的目录树，这次由于一个项目的需要（构建标题大纲），需要在前端使用JS构建ul li的多层次列表，其实就是类似于ZUI的树形菜单啦(￣▽￣)”实现原理首先需要准备一个对象数组，数组中的对象拥有level和title（可以自行命名，由于博主是生成标题的索引所以就使用title命名）另外，该数组需要按一定的顺序进行排序，否则就需要自行设置索引，排序的规则是子级必须紧跟在父级后，例如有了目录的对象数组，我们就可以通过递归或者栈来构建列表树了实现代码构建HTML通过调用getTocHtml()就可以获得目录的HTML，生成后的效果如下从代码中可以看到在li标签中还有img标签和带锚点的a标签，a标签是为了跳转到指定位置而设置的，可以按不同的需求进行调整，img标签是为了点击时显示和隐藏子级列表而设置的为目录添加toggle功能废话不多说，先上代码initTocTree()是用来初始化列表树的，该函数会修改有子列表点的父级列表图片，并为其添加onclick事件，toggleToc()是在img标签被点击的时候展开/隐藏子级列表的，同时修改其img图像，便于用户判断子列表是否已经展开，具体效果如下虽然有上篇文章的参考我还是想了很久，写出来的代码也很渣，看来还需不断的学习啊＞﹏＜"},{"title":"Laravel生成目录树","date":"2019-03-15T13:46:31.000Z","url":"/laravel-generating-directory-tree.html","tags":["PHP","目录树","递归","Laravel"],"categories":["折腾记录"],"content":"在XK-Note项目中由于需要读取取所有文件夹和所有文件，但是Laravel并没有提供生成目录树的函数，所以只能自己动手丰衣足食。ㄟ( ▔, ▔ )ㄏLaravel 提供了一个强大的文件系统抽象，我们可以直接使用，这样就不会使目录树只支持从本地存储生成。实现原理Laravel内置了 Storage::files($directory)可以读取指定目录下的文件并生成一个索引数组， Storage::directories($directory)可以读取指定目录下的子目录并生成索引数组，利用这两个函数就可以将指定文件夹下的所有文件和所有子文件夹的信息都存入数组中，然后可以递归提取出来的子文件夹进行深层查找，直到没有子文件夹为止，但是这样提取出来的数组会变得乱七八糟的，在生成目录列表的时候就不容易，所以要在递归的同时修改生成的索引数组。生成的目录树结构如上，当key为数字时则代表value为文件，当key为字符串时则代表value为文件夹。实现代码FolderModelFolderController"},{"title":"XK-Note - 集各种神奇功能的云笔记","date":"2019-03-10T07:17:00.000Z","url":"/xknote.html","tags":["PHP","Laravel","Note","ZUI"],"categories":["折腾记录"],"content":"v2版正在开发中(๑&gt;؂&lt;๑），敬请期待前言博主是个计科的大学生，所以经常需要将一些不太理解的代码或者经验记录下来，纸质笔记对一些经验还好，一旦涉及代码。。。，所以博主的笔记都是电子的，在弄好这个笔记时使用的是Typora，确实非常好用，但是有个硬伤，同步不便，到机房上课的时候笔记就派不上用场，并且查看还要使用支持Markdown的编辑器。可谓苦不堪言，直到我在Github上看到了Editor.md这个项目，于是便开始了Coding。简介 IntroductionXK-Note = Laravel . ZUI . Editor.md;一个由上方代码组成，集各种神奇功能的云笔记。特性 Feature[云存储] 云端撰写笔记，随时保存，多端同步。[跨平台] 多平台支持，撰写查阅只需一个浏览器，无惧任何不兼容情况。[响应式] 所有页面均采用响应式设计，即使尺寸极小的设备也能保持良好的体验。[在线浏览] 拥有独立的浏览模式，查看笔记不再困扰。[Git同步支持] 独有的Git支持，支持版本控制，无惧误操作，随时从旧版本恢复笔记。[浏览器临时保存] 独有的浏览器端保存功能，即使断网了也能安心写作，无惧任何网络波动。[多用户] 笔记主要面向个人使用，但是也支持多人同时使用，每个用户的笔记互相隔离保存，无需担心笔记泄露。[导出笔记] 支持多种导出格式，保存为MD文件，html文件，由本地即时生成，无需繁琐的操作。[多种模式] 拥有多种模式，写作，预览，阅读，满足各种人的需求。还有多种神奇的功能等待你的发掘。演示 DemoXK-Note安装 Install前往 Release 下载，然后上传至服务器，并解压到网站根目录安装依赖[prism lang=”bash”]# Ubuntu/Debian 其他系统请自行查阅 sudo apt-get install curl git curl -sS  | php sudo mv composer.phar /usr/local/bin/composer[/prism]进入网站根目录，并执行以下命令[prism lang=”bash”]composer install php artisan storage:link[/prism]将根目录下的xknote.sql文件导入到数据库中，并确认是否导入成功修改.env文件，将数据库信息填入.env文件中，并关闭调试模式[prism lang=””]APP_DEBUG=false[/prism]修改网站的运行目录到public打开网站，注册一个账户，并确认账户id是否为1(账户id为1代表管理员)enjoy文档 Doc暂无Github求 star =￣ω￣=维护者 MaintainerXK-Note 由 Otstar Lin和下列贡献者的帮助下撰写和维护。Otstar Lin - Personal Website · Blog · Github许可证 License根据 Apache License 2.0 许可证开源。渲染 Render"},{"title":"PHP GD图片处理[转换格式-水印-缩略图]","date":"2019-02-14T10:35:32.000Z","url":"/php-gd-image-processing.html","tags":["PHP","PHP-GD"],"categories":["折腾记录"],"content":"最近准备弄一个图床，既然是图床就需要能对图片进行一些常用的操作，比如水印，转换格式，生成缩略图等，前几天刚好接触了PHP的GD库，于是便花了点时间封装了这个简单的图片处理函数。"},{"title":"PHP GD生成验证码","date":"2019-02-14T04:39:21.000Z","url":"/php-gd-generates-verification-code.html","tags":["PHP","PHP-GD"],"categories":["折腾记录"],"content":"此验证码功能将会添加到Origami主题中"},{"title":"Origami - 简洁轻快的WordPress主题","date":"2019-02-05T05:49:20.000Z","url":"/theme-origami.html","tags":["Wordpress","Develop","Web","WordPress-Theme"],"categories":["折腾记录"],"content":"Origami v2现已发布，增加了许多功能，目前已经可以在WordPress中直接升级。QQ群已建立，794691511(没人用的 Origami)本主题谨献给在我博客道路上遇到的朋友们。前言其实我很早就想自己写个主题了，由于一些原因我没能把这个想法实现，直到我察觉到最近博客的访问速度变得很慢，迫不得已 才制作了这个主题，主题的UI和排版参考之前的主题（我实在不会设计/_ \\） 现在大部分博主都将博客换成了Hexo，我之所以还继续使用WordPress是因为WordPress的写文章和维护较为方便，而且我也不太熟悉Markdown，另外也有非常多的插件加持，并且不需要第三方评论系统。Origami折纸主题为什么将这个主题称之为折纸主题呢？因为主题的风格偏向纸片化，大多元素都是方方正正的，扁平化设计，并且刚开始制作的时候期望它能像纸片一样轻盈。为什么我会喜欢这种风格呢？其实是我看腻了MD的设计，普通的扁平化设计又太“圆滑”，原主题的纸片化设计可以很好的维持长久的观看体验，但是也有比较大的缺点，就是配色不能太鲜艳，当时在调色的时候可头疼了＞︿＜Feature 特性[独家] REST API加载，发布评论[独家] 评论者可在设置的时间内修改或删除评论，不必担心评论错误[独家] Origami Markdown区块(支持补全高亮，Gutenberg区块)[独家] Origami 代码区块(支持补全高亮，Gutenberg区块)Live Chat实时聊天REST API实时搜索前端修改主题3种布局风格侧栏右置/左置/不显示灵感/时光轴/友链模板Markdown评论流程图/时序图/甘特图/Katex支持LazyloadWorkBox注册和卸载OwO表情页脚显示建站至今的时间评论者标注（站长，友链认证）6个短代码，多种页面模板可视化编辑器和文本编辑器添加短代码阅读转移代码高亮文章目录ImgBox评论页面选单…Loading speed 加载速度Gtmetrix：100%(Pagespeed) 97%(YSlow) 0.6s(加载时间)Lighthouse：100%(Desktop) 100%(Mobile)web.dev：99% Loading time：946ms(第一次加载) 187ms(第二次加载，即有缓存情况)Demo 演示此博客即使用Origami主题Origami演示站Docs 文档WikiFeatures 功能请前往Origami演示站查看Install 安装前往 Releases 下载，然后上传到WordPress中，确保主题文件夹名称为Origami首次安装请先将对主题进行设置，防止出现未知问题从v1版本升级请在升级后重新对主题进行设置若要启用WordBox，请先将主题文件夹下的js文件夹中的sw.js复制至WordPress根目录已经修复了WorkBox的缓存规则，这里说明一下，启用WorkBox会使用户的浏览器的请求完全被WorkBox接管，一旦启用后，页面的加载速度将得到质的提升，但是若要删除就必须加载卸载WorkBox的js，否则用户访问的页面将不会更新若站点使用https，同时又需要引用http的资源，请将功能设置中的阻止混合内容关闭Github求 star =￣ω￣=Maintainer 维护者Origami主题 由 Otstar Lin和下列贡献者的帮助下撰写和维护。Otstar Lin - Personal Website· Blog· GithubLicense 许可证根据 GPL V3.0 许可证开源。结语首先感谢你能看到最后，同时感谢你对该主题的兴趣。无论你是否已经完成建站，我都诚挚邀请你来尝试一下这个主题。 然后，这款主题是开发不久的，尽管我在发布的时候做了细致的测试，也难免存在Bug，若你在使用中遇到问题，请及时联系我进行修复。 由于第一次接触这种“大型项目”，项目中的代码可能非常混乱，我会在未来继续优化代码 另外，Origami主题是免费发布的，根据GPL V3.0许可证开源，你不需要为此付出任何费用，但是，你必须保留底部的Theme - Origami By Otstar Lin 标识。"},{"title":"为WordPress启用WorkBox","date":"2019-02-02T12:45:46.000Z","url":"/wordpress-enabled-workbox.html","tags":["Wordpress","Service Worker","WorkBox"],"categories":["折腾记录"],"content":"若你是一个追求极致Web体验的站长，那你一定或多或少都听说过Service Worker，而现在已经是2019年了，Service Worker已经不是一项令人惊叹的技术了，Service Worker会接管全站的请求，若一不留神用户说不定就再也无法看到站点最新的资讯了，不过Google Chrome 团队推出了 Workbox，使编写缓存规则不再困难。本文是面向WordPress的教程，不适用于Typecho使用方法注册Service Worker在主题的functions.php加入以下代码引入WorkBox框架若成功引入就会在浏览器的控制台中输出Yay! Workbox is loaded ?同时可以在开发工具中的Application选项卡中的Service Workers中看到激活信息写入规则由于WordPress是动态博客，所以在写规则的就会遇到一些静态博客不会遇到的问题，比如静态博客的页面是已经渲染好的，只要缓存html等静态文件就可以实现离线访问，而php的页面是实时渲染的，并且有后台，还有评论系统，这些都不能进行缓存建议安装WP Super Cache首先定义缓存的版本号和默认最大缓存数目（可以忽略，但后面的代码需要进行修改）然后限制必须使用网络的资源结尾至此站点除了后台，其他的页面应该就可以进行全站离线访问，但是由于使用了缓存，若站点未将评论分离的话，就会导致评论不能实时更新，这时候就可以使用第三方评论系统来代替默认评论，如Disqus（国内处于被墙状态）我的新主题已经使用了WorkBox，可以去尝试一下 Link 从缓存中的加载页面的速度可以达到惊人的219ms"},{"title":"[青空之蓝-2018]-年度总结","date":"2018-12-30T19:13:32.000Z","url":"/my-blog-2018-year-end-summary.html","tags":["年度总结","博客记录"],"categories":["站长杂谈"],"content":"又到了一年一度写年度总结的时候，博主我从29号就准备开始写，一直咕咕到了31号，是时候回顾一下2018了。配乐是博主从歌单随便选的，可听可不听[hermit autoplay=”false” mode=”circulation” preload=”auto”]netease_songlist#:28661195[/hermit]往事2018年前半年博主由于是高三学生，为高考努力着，相对平淡，没有什么能值得回忆的事，也忘记了许多事，但是还依稀记得当初东拼西凑的完成了Toastr.js其实是从文章中看到的，主页貌似也换了几代2018年6月8号考完后正式解放了，终于有了点时间弄点奇奇怪怪的东西，将主页换成了现在的样子，其实也是从网上找的模板，但是加了一些新奇的东西，比如延迟加载啦，貌似也只加了延迟加载7-8月由于在学车，所以文章各种咕咕咕，只是优化了博客的访问，添加了部分特效，并未学习任何技术。9月进入大学后有了许多时间，用了一个月将大一C语言学完了，之后学习了Java，Python，但是都只学到了表层，至今还未学完，目前正在苦逼的复习中，防止期末挂科＞﹏＜。站点部分已经在上方说了，这里就重新整理下博客主题换成了Grace，并沿用至今博客从去年年底迁至VirMach并使用到3月4月博客迁至Vultr，然后博客访问速度逐月下降8月迁至Hostwinds，直到现在还在用博客Grace主题被我多次修改，将原本古老的a配色调成了现在的浅蓝色导入了canvas-nest.js，就是博客背景那些会动的小点，刚加上去的时候玩了一个多小时(￣▽￣)”博客4月换了域名，一个月后，谷歌,必应,百度等搜索引擎收录为博客增加了Toast通知主页改版，并加入了伪按需加载同时为主页和博客启用Service Worker，二次加载缩短至1秒内，前提是访问的设备不会太垃圾前几天修改评论插件的一些细节其他大多都记不住了。。。。友人友链24个，2018年我加入了Zohar大佬创建的TG群，群里除了我个个都是大佬，从群里认识了许多有趣的人，有Zohar、Axton、LWL、Sukka、Edison Jwa、Elepover、Fly、立音、Indexyz、Meto、Milkice等等。。。，线下也认识了⑨BIE大佬除此之外，我还认识了新的同学，都是一些志同道合的优秀人士首先要感谢[博主交流群]中的友人们，是你们将我引领进神奇的互联网，使我能够了解Web各种方面的技术。也感谢能与我共度互联网的朋友们。未来繁忙的高中已经结束，进入了大学，专业又是计算机科学与技术，所以未来都是研究这些东西，搞搞新奇的小玩意等等，这里就随便写写吧将Java学完，同时学习Spring Boot框架学习Python和前端看完想看的书籍还有其他的暂时还没想到。。。尾声写了挺久的，具体时间没统计，应该有一个多小时吧，大多时间都在想要写什么(￣▽￣)”2019我将会咕咕咕积极更新文章，同时提高文章质量，给能来我这已经长满杂草的博客的人士最大的帮助。。。无论如何，感谢你能读到最后。新的一年，让我们继续努力吧！2019望一切顺利，祝各位新年快乐。"},{"title":"Windows IP变化自动发送邮件","date":"2018-12-30T09:18:40.000Z","url":"/windows-ip-changes-to-automatically-send-mail.html","tags":["Lab","Python"],"categories":["分享推荐","折腾记录"],"content":"由于学校的机房使用的IDE过于坑爹，什么VC6.0啦，VS2008啦，DEV-C++啦，一点补全功能都没有，Java用的是反人类的Eclipse，无奈只能远程连接我的工作站，其实就是垃圾笔电啦，这时就需要知道笔电的IP，然而学校并不提供固定IP，什么时候变化都不可知，若IP变了然而我不知，上课时只能咕咕了，所以只好造个通知的脚本来检查IP变化，并在变化时发送邮件通知我原理还要什么原理，就是执行windows的ipconfig命令然后提取其中的IPv4地址，与之前检测存储的IP进行比较，若相同，则IP不变化，若变化就写入新的IP，同时调用发送邮件的脚本实现本文使用Python3来开发，所以需要先装好Python3的环境，至于为什么要用python来开发，请看上一篇文章，其实就是Java要导入jar包，之前没解决如何jar包，无奈只能使用不太熟悉的Python来开发检查脚本发送邮件脚本博主偷懒就只发送ipconfig的返回值，没切片得出IP，需要的可以将切片代码从检查脚本复制到通知脚本即可"},{"title":"VSCode Java手动导入jar和源码包","date":"2018-12-30T08:45:59.000Z","url":"/vscode-java-manually-imports-jar-and-source-package.html","tags":["Java","VSCode","开发环境"],"categories":["折腾记录"],"content":"使用Maven等包管理的可以不用向下看了，以下只讲述如何为普通Java项目导入单独的jar包之前有一篇文章讲述了如何配置VSCode的Java调试环境，博主我从配置成功使用到现在一直只使用了JDK自带的包，直到昨天由于有一个项目需要进行邮件发送，需要引入Mail包，网上的教程大多是在JDK中引入jar包，但是这时VSCode会报一大堆莫名奇妙的错误，然而实际运行JVM却没有报错，直到今天学习JDBC时Eclipse导入jar包时才发现可以在每个Java项目中独立导入jar包，然而VSCode又该如何导入jar包？探索在之前的教程中我的方案时利用一个插件来创建Java项目，而创建的Java项目就是Eclipse项目（VSCode支持Eclipse项目），创建项目后我们看到在项目文件夹中有两个子文件夹，一个用来存源码，一个用来存class文件，另外还有两个文件一个是.classpath文件，一个是.project文件，通过从Eclipse导出添加过jar和源码的项目可以发现，在.classpath的文件中多了一行配置从中可以看到，在VSCode中引入jar包只需将jar的路径填入到path中，源码路径填入到sourcepath中即可实现第一步：在项目文件夹中添加一个lib目录，一般引入的jar包都存储在lib目录，方便后续操作第二步：将要引入的jar包复制到lib目录下第三步：修改.classpath文件，增加一行classpathentry，并填入正确的路径，可以填相对路径，也可以填绝对路径若不导入源码只需将sourcepath属性删除即可若要导入源码请继续往下第四步：在lib目录中新建一个sources文件夹，然后将该jar包的源码复制到该文件夹即可第五步：在该jar包的classpathentry标签中增加sourcepath属性，并填入正确的路径第六步：Ctrl+S保存，然后回到java文件，此时一堆莫名奇妙的报错应该都已经消失了，若还存在，请重新启动VSCode或者重置VSCode中的Java环境结语这时有些人可能会吐槽这么麻烦为什么不换其他的IDE，因为已经掉入了VSCode的坑里爬不出来了，各种神奇的插件，非常快的启动速度，以及多种编程语言快速切换，博主我有多个工作区，比如C和Java的，切换时只需关闭目前的工作区然后切换另一个工作区，VSCode就会将该语言的编译环境自动加载，同时VSCode的代码补全也是极为方便的，基本只需要打两个字母然后按下Tab键，VSCode就能完成正确的补全，这时就要吐槽一下Eclipse反人类的补全快捷键，大多编辑器和IDE的补全快捷键都是Tab键，然而Eclipse却是不同寻常的Enter键，用起来实在难受，然而学校机房就是使用Eclipse（捂脸"},{"title":"C 结构体的定义和使用","date":"2018-12-26T08:20:53.000Z","url":"/definition-and-use-of-the-c-struct.html","tags":["C/C++"],"categories":["折腾记录"],"content":"应同学请求更新了这篇文章，正好没有水文的借口 （逃1.前言在C语言中结构体指一种数据结构，是C语言中复合数据类型，结构体可以被声明为变量、指针或数组等，用以实现较复杂的数据结构。结构体同时也是一些元素的集合，这些元素称为结构体的成员，且这些成员可以为不同的类型，成员一般用名字访问。与Java中的类类似一个结构体看可以看作是一个类别，某类事物的集合体，比如要表示一本书的各种属性（作者，页数，出版时间等），在没有使用结构体的时候，就需要使用各种基本数据类型进行存储，这时会发现在表示数据的时候乱七八糟的，调用的时候也不容易调用，但如果使用了结构体，那结构体名称就可以使用书名表示，书的各种属性就可以放在结构体中，在使用的时候可以很直观的用结构体名称（书名）调用2.实践定义结构在使用结构体的时候需要定义结构体，可以不先定义结构体变量，但必须先定义好结构体的结构tag : 结构体的标志，可以不设置，但是如果不设置就必须在定义时声明variable-list，一般使用全大写表示，建议每个结构体都要有tagmember-list : 结构中的成员，在定义的时候必须定义结构体中的所有成员variable-list : 结构体变量列表，若不声明就必须要有tag，可以声明多个，使用逗号隔开，也可声明结构体数组定义时也可以使用typedef来创建一个数据类型，下面会针对这两种定义方式进行分析嵌套结构体声明结构体变量结构体变量可以紧跟结构体后创建，不过由于结构体在函数外创建，所以紧跟结构体后声明的结构体变量是全局变量还有一种是在函数中创建使用typedef的创建创建结构体指针访问结构体成员创建好了结构体变量后才能进行访问3.结语结构体是C语言和多种类C语言中的一种数据结构，在Golang，C#，C++都有结构体，但是除了Golang，其它两种语言都支持面向对象，所以一般很少用到，但是在C中它是非常重要的，。。。。。。。。。编不下去了(￣▽￣)”  （逃"},{"title":"C链表实现重制版","date":"2018-12-26T02:42:20.000Z","url":"/c-linked-list-implementation-new.html","tags":["算法","C/C++"],"categories":["折腾记录"],"content":"重写了C链表的算法，将原本多个函数整合成一个函数，并且保留原本功能的函数，只不过现在是通过调用父函数实现，也就是子函数通过调用一个集成了多种功能的父函数实现部分父函数功能，减少了大量的代码，另外目前新算法是在之前写的Java链表的基础上写的，并且改进了部分代码，重新看了一遍自己写的Java链表才发现还有许多不足，不久后将会在这个算法上修改自己写的Java链表，(￣▽￣)” [alert-success]Coding了两个小时终于将排序部分弄完了，这次加入了快速排序，链表的排序不再缓慢 &lt;-这是不可能的，其实快速排序在某些情况下的速度会降到O(N^2)，正常情况下的时间复杂度是O(NlogN)，还加入了两个获取数据的函数[/alert-success]"},{"title":"图的搜索(遍历) - BFS & DFS","date":"2018-12-19T05:02:14.000Z","url":"/graph-search-bfs-dfs.html","tags":["算法","C/C++","Develop"],"categories":["折腾记录"],"content":"BFS，即 Breath First Search（广度优先搜索） DFS，即 Deep First Search （深度优先搜索） 图的搜索是对于连通图的一种遍历策略，常用于走迷宫的问题 本文的算法基于C语言编写，过几天会使用Java重写这两个算法 另外本文的算法是对基于数组的图进行搜索，基于链表的搜索暂时未弄 （逃1.BFS广度优先搜索顾名思义，就是在广范围进行搜索，从一个顶点V0开始，辐射状地优先遍历其周围较广的区域算法的基本思路在广搜中不需要记录节点是否走过，但是要记录上一个节点的位置，若将整个过程画成树，即可观察到广搜是一层一层进行遍历的（这里就不画图了，逃），这时若要搜索下一层节点就需要读取上一层节点的位置，并对父节点的所有节点逐个进行搜索，将符合要求的子节点逐个存入下一层节点，直到判断到达终点即停止搜索 基础算法采用递归，存储搜索各层节点采用队列，但由于C语言中没有队列所以采用结构体数组代替，使用二维结构体数组，其中一维对应层数，另一维存储该层的节点，另外若要使广搜拥有寻迹功能，即可以输出行进路程中每一步，就需要在结构体中增加一个结构体指针指向父节点，然后记录最后一个节点的地址，通过访问指针来访问父节点，直到到达起点算法的实现本算法由于要进行寻迹操作，所以保留了每一层的数据，若不需要寻迹建议只保留两个队列，即两个一维结构体数组2.DFS深度优先搜索类似于广度优先搜索，也是一种图的搜索算法，但是不同于广度优先搜索，广搜注重范围，而深搜注重深度，通俗来说，广搜就是广撒网，深搜就是一路走到黑，不撞南墙不回头\\(￣︶￣\\))算法的基本思路深搜需要定义一个跟原图相同的数组，然后通过该数组对数据进行标记，若已经走过就标记，回到父节点时将父节点的标记取消，基础算法依旧使用递归算法的实现两种算法的比较广搜由由于需要维护多条路径，同时存储多条路径，所以在正常情况下广搜使用的内存会比深搜多，编写也相对复杂，但是由于广搜一般是采用队列来存储路径所以没有爆栈的危险（C语言不适用），而深搜是使用栈进行存储的，由于系统分配给程序的栈是有限的，所以当深度过高时深受可能会出现爆栈。 一般来说用DFS解决的问题都可以用BFS来解决。DFS多用于连通性问题因为其运行思想与人脑的思维很相似，故解决连通性问题更自然。BFS多用于解决最短路问题，其运行过程中需要储存每一层的信息，所以其运行时需要储存的信息量较大，资源的消耗也较多。但是在不同问题中两者占优的情况是不同的，当图较为复杂二者其实差别不大。"},{"title":"Java链表实现","date":"2018-11-29T14:40:03.000Z","url":"/java-linked-list-implementation.html","tags":["算法","Develop","Java"],"categories":["折腾记录"],"content":"转换阵营ing，大部分的介绍都在注释写了，这里就不再重复了，注释中没有关于链表的原理，如果还不懂链表的可以先去看其他教程，这里不写主要是我比较懒(￣▽￣)” [alert-success]之前的算法有问题，现在已经修改完成，并重写了部分代码，对数据域使用泛型，可以存放任何对象了，存放不同数据类型时就不再需要定义多个链表类了ヾ(≧▽≦*)o[/alert-success] [alert-note]这个算法还有优化的空间，不久后将升级，心急的可以看C链表重置版然后将其改成Java即可[/alert-note]"},{"title":"C 快速排序","date":"2018-11-27T03:24:10.000Z","url":"/c-quick-sort.html","tags":["算法","C/C++","Develop"],"categories":["折腾记录"],"content":"开头和介绍都是不存在的（￣︶￣）↗[alert-success]这次是真修复了，坑爹呀，LintCode提交了好几次，终于AC了，应该是没问题了≧ ﹏ ≦，另外我这代码只能算还行只打败了51%的提交 （捂脸[/alert-success]"},{"title":"C 归并排序","date":"2018-11-20T06:10:13.000Z","url":"/c-merge-sort.html","tags":["算法","C/C++","Develop"],"categories":["折腾记录"],"content":"懒得写开头，过几天应该会添加(￣▽￣)”[alert-warning]终于将排序算法修复完成啦！！！，目前已经不需要判断是否是奇数个了ヾ(≧▽≦*)o[/alert-warning]"},{"title":"C 插入排序","date":"2018-11-20T02:45:15.000Z","url":"/c-insert-sort.html","tags":["算法","C/C++","Develop"],"categories":["折腾记录"],"content":"懒得写开头了(_　_)。゜zｚＺ，继续下一个排序算法"},{"title":"C语言链表实现","date":"2018-11-12T12:51:26.000Z","url":"/c-linked-list-implementation.html","tags":["C/C++","Develop"],"categories":["折腾记录"],"content":"先放代码，开一波坑，以后慢慢填ヾ(≧▽≦*)o 由于我在上传的时候未进行完整测试，导致排序部分有些问题，现已修改完成。 另外排序部分只弄了int型的排序 改指针相关的东西真头真疼，特别是链表，折腾了一个多小时。〒▽〒 [alert-success]重写升级完成，这个算法目前除了排序还有用其他就没有用了，可以点这里直接跳转到重制版[/alert-success]#include &lt;stdio.h&gt;#include &lt;malloc.h&gt;//链表结构typedef struct Test{    int data;    struct Test next;}Test,pTest;//头插法-创建pTest Create_Head(int n/链表包含节点个数/){    int i,data;    pTest list,node;    //创建头节点    list = (pTest)malloc(sizeof(Test));    list-&gt;next = NULL;    for(i=0;i&lt;n;i++)    {        //创建临时节点        node = (pTest)malloc(sizeof(Test));        //读入数据        printf(“请输入第%d个数据\\n”,i+1);        scanf(“%d”,&amp;data);        //将数据存入临时节点的数据域中        node-&gt;data = data;        //将list头节点的next指针复制到node头节点的next指针        node-&gt;next = list-&gt;next;        //将node链表指针结合到list头节点的next指针        list-&gt;next = node;    }    //初始化头节点数据    list-&gt;data = 0;    return list;}//尾插法-创建pTest Create_End(int n/链表包含节点个数/){    int i,data;    pTest list,node,p;    //创建头节点    list = (pTest)malloc(sizeof(Test));    list-&gt;next = NULL;    //将副本链表指向list用来间接为list指针域赋值    p = list;    for(i=0;i&lt;n;i++)    {        //创建临时节点        node = (pTest)malloc(sizeof(Test));        //读入数据        printf(“请输入第%d个数据\\n”,i+1);        scanf(“%d”,&amp;data);        //将数据存入临时节点数据域        node-&gt;data = data;        //将副本最后的指针域指向临时节点        p-&gt;next = node;        //将临时节点的指针域置NULL        node-&gt;next = NULL;        //移动副本节点使最新的指针域成为副本链表的最后一个        while(p-&gt;next != NULL)        {            p = p-&gt;next;        }    }    //初始化头节点数据    list-&gt;data = 0;    return list;}//添加节点至指定位置pTest Insert_pos(int i/要添加到什么位置/,pTest list/要进行添加节点的链表/){    int data;    pTest node,p,temp;    //创建list链表的副本    p = list;    //修改位置为实际位置    i = i - 1;    //调整链表指针域位置,临时链表的头节点到达要添加的节点的上一个节点    for(int u = 0; u &lt; i; u++)    {        p = p-&gt;next;    }    //创建临时节点    node = (pTest)malloc(sizeof(Test));    temp = (pTest)malloc(sizeof(Test));    //读入数据    printf(“请输入第%d个数据\\n”,i+1);    scanf(“%d”,&amp;data);    //读入数据到临时节点的数据域    node-&gt;data = data;    //将目前节点的next即下一个节点的地址临时存起来    temp-&gt;next = p-&gt;next;    //把目前节点的next改为node节点，即进行插入    p-&gt;next = node;    //将node的next改为之前没修改时的下一个节点地址    node-&gt;next = temp-&gt;next;    //返回修改好的链表    return list;}//添加已经拥有数据的节点pTest Insert_pos_own(int i/要添加到什么位置/,pTest list/要进行添加节点的链表/,pTest node){    int data;    pTest p,temp;    //创建list链表的副本    p = list;    //修改位置为实际位置    i = i - 1;    //调整链表指针域位置,临时链表的头节点到达要添加的节点的上一个节点    for(int u = 0; u &lt; i; u++)    {        p = p-&gt;next;    }    //创建临时节点    temp = (pTest)malloc(sizeof(Test));    //将目前节点的next即下一个节点的地址临时存起来    temp-&gt;next = p-&gt;next;    //把目前节点的next改为node节点，即进行插入    p-&gt;next = node;    //将node的next改为之前没修改时的下一个节点地址    node-&gt;next = temp-&gt;next;    //返回修改好的链表    return list;}//删除指定位置的节点pTest Delete_pos(int i/要删除第几个节点/,pTest list/要进行删除节点的链表/){    pTest p,temp;    //创建临时节点    temp = (pTest)malloc(sizeof(Test));    p = list;    //调整实际位置    i = i - 1;    //调整链表指针域位置,临时链表的头节点到达要删除的节点的上一个节点    for(int u = 0; u &lt; i; u++)    {        p = p-&gt;next;    }    //将要删除的节点的下一个节点的地址存入temp的指针域    temp = p-&gt;next-&gt;next;    //将temp的指针域赋给要删除节点的指针域    p-&gt;next = temp;    //free(temp);    //返回修改后的链表    return list;}//清空链表,保留头节点pTest Clear_List(pTest list){    pTest p = list-&gt;next; //移动到第一个结点    pTest q;    while(p) {        //printf(“%d\\t”, p-&gt;data);        q = p;        p = p-&gt;next;        free(q);    }    list-&gt;next = NULL;    return list;}//遍历链表pTest Print_List(pTest list){    pTest p;    p = list-&gt;next; //移动到存放真实数据的第一个结点    while(p) {        printf(“%d\\t”, p-&gt;data);        p = p-&gt;next;    }    printf(“\\n”);    return 0;}//链表逆置pTest Resever(pTest list){    pTest p, q, r;    p = list;//P指向头结点    q = p-&gt;next; //q指向第一个结点    while(q-&gt;next) {        r = q-&gt;next;        q-&gt;next = p;        p = q;        q = r;    }    q-&gt;next = p; //连上最后一个结点    p = list-&gt;next;    p-&gt;next = NULL; //收尾    list-&gt;next = q; //赋头    return list;}//链表排序-从小到大pTest Bubble_Sort(pTest list){    //定义排序个数和下标的变量    int n = 0, i, j, k;    //定义判断链表个数的链表和用来判断大小的链表    pTest p = list, temp;    //判断链表的个数    for(;p-&gt;next!=NULL;p = p-&gt;next)    {        n++;    }    //外层循环控制循环轮数    for(i = 0; i &lt; n; i++)    {        //内层循环控制每轮比较次数        for(j = 0; j &lt; n; j++)        {            //遍历比较相邻链表数据的大小            temp = list;            //移动比较用的链表            for(k=0;k&lt;j;k++)            {                temp = temp-&gt;next;            }            if(temp-&gt;data &gt; temp-&gt;next-&gt;data)            {                //交换的方式是先删除大数据的节点，然后在添加回链表                //删除大数据的节点                list = Delete_pos(j,list);                //将删除后的节点添加会链表的下一个节点                list = Insert_pos_own(j+1,list,temp);            };        }    }    return list;}int main(){    pTest list = Create_End(5);    list = Bubble_Sort(list);    return 0;}"},{"title":"VSCode配置Java调试环境[Windows]","date":"2018-11-06T12:04:27.000Z","url":"/vscode-configuration-java-gdb-debugging-environment-windows.html","tags":["Develop","Java","VSCode"],"categories":["折腾记录"],"content":"其实Java环境我很早就开始配置了，但是一直有问题，今天又手贱尝试了一下，没想到就成功了，即时更新博文是我的习惯 （防止被打死，赶紧逃(/ω＼)环境准备JDK下载 JDK 并进行安装，我比较推荐安装Java SE8，另外下载时记得点上Accept License Agreement，否则点击不会反应打开PowerShell或者CMD，输入 java -version 和 javac -version如果没提示错误信息就代表JDK配置成功正常情况下JDK安装时是不会自动配置环境变量的，所以javac -version一般都会提示错误，这时只需将JDK目录下的bin目录添加到环境变量即可，具体操作请自行搜索或者查看VSCode配置C/C++ GDB调试环境[Windows]VSCode按下 Shift+Ctrl+P进入命令面板然后在src文件夹内创建一个 HelloWorld.java文件然后点击F5，就会发现在父文件夹下多了一个.vscode文件夹，里面有一个launch.json文件，不进行配置的话也可以进行运行，但你是否发现没有出现界面，这时还需要修改一个值这时再次点击F5就可以正常调试了2019-06-29更新VSCode的Java插件包现在似乎添加了自动安装JDK的功能和一些常用函数的补全"},{"title":"C 选择排序","date":"2018-10-27T15:11:28.000Z","url":"/c-select-sort.html","tags":["算法","C/C++","Develop"],"categories":["折腾记录"],"content":"就按上一篇的格式写吧，其实还有很多C笔记可以水几篇文章，偷懒中。。[alert-success]此算法已修复，放错了交换代码的位置，导致出现问题，我果然是菜鸡(￣▽￣)”[/alert-success]思想和举例选择排序同样是通过遍历的方式进行比较排序的，只不过不再是通过不断交换相邻的两个数字，而是遍历搜索最大或最小值然后将最大值或最小值与最后方或者最前方的值进行交换，以此类推直到最后完成排序，具体排序的过程可以查看维基百科，偷懒。。 看什么呢，没有举例~(￣▽￣)~算法总结与实现不用介绍了直接上算法吧(￣▽￣)”#include &lt;stdio.h&gt;#define N 10 //定义要排序的数组长度//选择排序控制Demo//选择排序结果和方式//结果：输出排序的数组//方式：遍历比较//本例排序从低到高int main(int argc, char const *argv[]){    int nums[N], temp, j, i;    printf (“请输入要进行排序的数列：\\n”);    for (int u = 0; u &lt; 10; u++) //循环输入数组    {        scanf (“%d”, &amp;nums[u]);    }}对了，这次采用了循环输入，不用再写很长的输入了ヾ(≧▽≦*)o"},{"title":"C 冒泡排序","date":"2018-10-05T06:28:41.000Z","url":"/c-bubble-sort.html","tags":["算法","C/C++","Develop"],"categories":["折腾记录"],"content":"冒泡排序，在学到循环和数组的时候肯定会接触到这个最基本的排序算法。为什么这种算法要叫做冒泡排序呢？是因为这个排序算法有点像水泡向上冒。在大学计算机的课程中一定会讲到的排序方法，博主我作为计科的一员也是要学习的，先行偷学ing （逃思想与举例冒泡排序的基本思想就是不断比较相邻的两个数，让较大的元素不断地往后移。经过一轮比较，就选出最大的数；经过第2轮比较，就选出次大的数，以此类推。 下面以6 2 5 3进行举例说明第一轮排序6 2 5 3（初始）2 6 5 3（2 6交换）2 5 6 3（5 6交换）2 5 3 6（3 6交换）第二轮排序2 5 3 6（初始）2 5 3 6（2 5不变）2 3 5 6（3 5交换）至此由小到大的排序已经完成。算法总结与实现首先创建数组nums[N]然后进行N-1轮的比较，然后在每轮中进行逐个比较，若不符合大小排序则进行交换，直到所有数符合大小排序#include &lt;stdio.h&gt;//冒泡排序控制Demo//冒泡排序结果和方式//结果，使不按大小排序的数组，通过排序后按大小排列//方式，遍历比较////排序方式从高到低//int main(int argc, char const *argv[]){    int i,j,temp,n;    int nums[10]; //要进行排序的数组    printf (“请输入10个数字\\n”)    scanf (“%d %d %d %d %d %d %d %d %d %d”,&amp;nums[0],&amp;nums[1],&amp;nums[2],&amp;nums[3],&amp;nums[4],&amp;nums[5],&amp;nums[6],&amp;nums[7],&amp;nums[8],&amp;nums[9]);}"},{"title":"VSCode配置PHP调试环境[Windows]","date":"2018-09-06T17:20:06.000Z","url":"/vscode-configuration-php-gdb-debugging-environment-windows.html","tags":["PHP","Develop","VSCode","开发环境","断点调试"],"categories":["折腾记录"],"content":"没有灵感,连续水一波 (逃其实是我刚配好,比较健忘,以后重新配置的时候方便环境准备XAMPP&amp;XDebug下载 XAMPP 并安装记好安装路径,后面会用到打开XAMPP开启Apache,获取PHP info,进入PHP info页面后直接全选复制,全部复制到 XDebug 检测网址 中的输入框中,点击后网站会分析出你当前的 php 环境最适合的 xdebug 版本,并给出下载链接,下载完成后，将该文件复制到 php 的扩展目录中,即安装目录中的 ext 文件夹下打开XAMPP,进行配置php.ini编辑php.ini,在最下方添加以下代码,路径记得更改VSCode配置VSCode找到XAMPP的网站文件夹,即htdocs文件夹,在htdocs下创建你的工作区(文件夹),然后在VSCode中打开此文件夹,然后创建一个测试用的PHP文件接着照着以下操作配置至此VSCode PHP调试环境就配置完成了,接下来就是重(坑)磅(逼)的断点调试技巧断点调试返回刚创建的php文件开始愉快的调试吧 (逃"},{"title":"VSCode配置C/C++ GDB调试环境[Windows]","date":"2018-09-04T04:23:40.000Z","url":"/vscode-configuration-c-cpp-gdb-debugging-environment-windows.html","tags":["C/C++","Develop","VSCode","开发环境","断点调试"],"categories":["折腾记录"],"content":"折腾了两个小时，终于把VSCode调试环境弄好了 （开心环境准备VSCode安装C/C++ for Visual Studio Code 插件按下 Ctrl+Shift+X在搜索框中输入 C/C++安装第一个插件至此VSCode环境部分配置完毕GDB安装MinGW下载 MinGW点击Continue开始安装，安装过程需联网，若安装时提示error则需使用梯子进行安装当Continue按钮恢复为可用状态，点击完成安装GCC环境安装打开MinGW选中左栏的Basic Setup,然后选中mingw32-gcc-g++-bin,右键选择Mark for installation选中All packages,找到mingw32-gdb-bin,mingw32-gdb-doc,mingw32-gdb-info,mingw32-gdb-lang,mingw32-gdb-lic,mingw32-gdb-man,右键选择Mark for installation点击左上角的installation,然后点击Apply Changes点击Apply,等待安装完成,点击close至此GDB环境部分配置完成MinGW配置较为繁琐，可以考虑使用MinGW64，MinGW64安装后就不需上方的配置，一路点击下一步即可。（但是还是要配置环境变量添加环境变量进入设置,点击系统,然后选择关于,然后点击右侧系统信息在弹出的系统信息中,选中左栏高级系统设置,然后选中环境变量在系统变量一栏中找到Path,双击,然后新建一个C:\\MinGW\\bin 的变量一路确定,直到关闭所有选卡重启电脑配置VSCode新建一个cpp文件,写上以下测试代码Ctrl+S保存,然后按F5,VSCode会在上方弹出选择环境,选择C++(GDB/LLDB),然后将以下代码覆盖至launch.json,注意miDebuggerPath路径要对应回到新建的cpp中,按下F5,会显示找不到任务,点击配置任务,点击使用模板创建,然后点击带有Other的选项,用以下代码覆盖tasks.jsonCtrl+S保存,然后回到新建的cpp,按下F5,程序就会被编译运行,至此GDB调试环境便配置完成.对了,C/C++也是可以进行断点调试的,具体方法可以参考 VSCode配置PHP调试环境[Windows]"},{"title":"WordPress友情链接模板","date":"2018-08-28T05:28:51.000Z","url":"/wordpress-links-template.html","tags":["Wordpress","PHP","Mysql","Web"],"categories":["折腾记录"],"content":"没错又是一篇水文 （逃 使用此模板需要安装Link Manager插件，模板文件已上传至Github，可以直接取用。最终效果请自行查看本站友情链接页面代码部分link\\_url\\\\\" style=\\\\\"background-image:url($comment->link\\_image);background-size: cover;\\\\\">“.$comment-&gt;link_name.”“.$comment-&gt;link_notes.”link_rss\\\\\">“;                    $output1 .= $tmp;                }                $output1 = ““.$output1.”“;                echo $output1;            ?&gt;                此页模板由Otstar-Lin于2018制作,源码已上传至Github    &lt;?php get_footer(); ?&gt;使用方法安装Link Manager插件并激活，在主题模板的文件夹新建一个PHP文件，将上面的代码复制进去并保存，或者去Github下载已经弄好的文件，并确定文件权限无误，进入WordPress后台，添加一个页面，选择友情链接模板进行创建，之后就可以在链接菜单进行添加了。 图像地址对应背景图 RSS地址对应友人头像 备注对应友链简介 保留the_content()函数，可以在编辑器中添加内容。"},{"title":"Intel Optane 傲腾内存体验","date":"2018-08-21T13:52:53.000Z","url":"/intel-optane-experience.html","categories":["折腾记录"],"content":"前天我拿到了购买已久的神舟ZX6-CP5T（吐槽一下垃圾顺丰，陆运实在慢），这台笔电的存储方案是1T 5400转机械硬盘+16 G傲腾内存，别问我为什么不买SSD+机械，因为我没钱T_T。Intel Optane 是什么3年前Intel与镁光合作开发3D XPoint，这种技术拥有DRAM的低延迟以及NAND的非易失，而Intel Optane是目前能以最低价买到的3D XPoint设备。 Optane内存的接口是NVMe M.2，但在神舟ZX6-CP5T中Optane内存并非插在NVMe M.2上，而是插在NGFF M.2上（推测并非准确，主板上只有一个插槽标明Optane可使用），Optane内存可以加速除本体外的本机硬盘（包括SSD，机械硬盘），加速效果很明显，但也有一堆缺点。Optane的缺点没错，先说缺点就是要打消你们剁手的念头(｢･ω･)｢装上后不能随意拔插（换插槽都不行）首次安装需要重装系统启用后随意进BIOS在BIOS中取消加速并分离磁盘RAID很慢目前只能在Windows下进行加速只有7代或以上平台能使用取消加速后会让你想砸掉电脑随意拔插Optane内存或者被加速的存储设备会导致电脑无法引导启动，并且需要一进行一系列操作才能恢复，具体方法请在下方寻找 取消加速后开机时间3分钟以上（Win10系统） 启用加速后进入BIOS会导致不能加速，需要重新配置Optane的优点最大的优点就是能让10年前的垃圾机械也能焕发新机，对Win10系统的加速效果非常明显，开机从3分钟提升至10秒，动画效果不再卡顿，应用开启速度也变快许多，然后没了(:з」∠)暂时只体验到这些Optane部分问题修复拔插Optane导致无法引导进BIOS-&gt;第二页（Advanced）-&gt;第二个（Intel Rapid Storage Technology）-&gt;然后选择带有Intel Optane的选项-&gt;点击第一个（部分是Deconcatenate，反正点就是，不用管）-&gt;选择Are You Sure….那一行，切换至Yes-&gt;点击最后一行（部分是Start….，点就是，不用管），然后底下会出现一段Warning….，这时候BIOS会”卡”住，等待变化，跳出刚才的页面就可以退出BIOS了，然后还是不能引导，重启一下即可，之后耐心等待开机，开机后打开Optane管理软件，点击启用，重启2次，第三次就能恢复正常，10秒开机，秒响应。"},{"title":"Mysql双机热备实战","date":"2018-07-11T16:07:24.000Z","url":"/mysql-dual-hot-backup.html","tags":["Develop","Mysql","Web"],"categories":["折腾记录"],"content":"由于跟 Tao.cat 的博主合租一台VPS，但由于Vultr还有余额并且以后会将博客迁出合租的服务器到时候迁移又很麻烦，所以便利用分区解析将国内的流量引到合租服务器，国外流量引到Vultr的服务器，但同步又是个大问题，冷备份会丢数据，所以经过一番思考决定采用热备份的方式同步数据。[alert-success]由于缓存插件带来了一些大坑，技术欠佳，暂时无法填上，所以博客放弃双机集群[/alert-success]准备工作两台服务器，建议异地尽量使用 相同版本 的Mysql确保两台服务器能互相交流确保Mysql端口（3306）是通的尽量先在测试服务器配置成功后再进行业务服务器配置主服务器Ａ配置第一步：停止所有业务，避免有新的数据库写入强烈建议停用所有业务　因为后面有一步会涉及到动态数据，我第一次配置就是因为数据变化导致启用失败。 停用方案比如 WHMCS 和 WordPress 的维护模式第二步：导出数据库命令行或者phpmysql都可以mysqldump -u 用户  -p 密码   数据库  &gt; backup.sql以下是一个事例（假设用户是 root ，密码是 1234 ，需要备份的数据库是 wordpress ）mysqldump -uroot-p1234 wordpress &gt; backup.sql第三步：修改主服务器 A 的 mysql 配置文件一般情况，配置 mysql 的位置文件在 /etc/my.cnf 在 [mysqld] 标签下增加以下内容#一般配置文件已经有了，开启日志log-bin = mysql-bin#一般配置文件自带了binlog_format = mixed#随便写但 主从的数字不可相同server-id = 1#备份的数据库名称binlog-do-db = wordpress#集群的服务器数量，看你一共想要多少台热备份auto-increment-increment = 2#auto_increment_offset＝1设置步长,这里设置为1,这样Master的auto_increment字段产生的数值是:1, 3, 5, 7, …等奇数ID，不高于上面这个参数auto-increment-offset = 1设置完后请重启 mysql 服务，以便设置生效service mysql restart第四步：在主服务器 A 连上 mysqlmysql -u 用户 -p 密码mysql 的连接命令为 mysql -uroot -p1234 (这里假设用户是root,密码是1234)需要注意的是,u和用户,p和密码之间没有空格。第五步：在主服务器 A 上创建用于备份的用户该命令需要在上步连接 mysql 后，运行于 mysql 的命令行模式grant replication slave on . to ‘用户名‘@’从服务器B的IP’ identified by ‘用户密码’;需要在把上面命令的用户名，密码和从服务器的IP换成你自己的。下面是一个例子：grant replication slave on . to ‘slave1‘@’192.168.1.1’ identified by ‘1234’;该命令的意思就是：创建一个用于备份的用户，用户名是slave1，密码是1234，这个用户只允许从192.168.1.1这个IP的机子上登陆第六步：取得主服务器 A 的 mysql 目前的状态show master status\\G目的是使同步初始化，该从那行开始执行同步  请记下这个 File 和 Position 的内容！从服务器B配置一般情况，配置 mysql 的位置文件在 /etc/my.cnf 在 [mysqld] 标签下增加以下内容#一般默认都有了，开启 loglog-bin = mysql-bin#一般默认都有了binlog_format = mixed#随便写但 主从的数字不可相同server-id = 2#进行镜像处理的数据库replicate-do-db = wordpress#这行照抄relay_log = mysqld-relay-bin#用从属服务器上的日志功能log-slave-updates = ON第三步：连接上从服务器B的mysql命令行模式mysql -u 用户  -p 密码 第四步：给从服务器B设置主服务器的相关信息在命令行模式下运行下列命令：CHANGE MASTER TO MASTER_HOST = ‘主服务器A的IP’, MASTER_USER = ‘备份的用户名’, MASTER_PASSWORD = ‘备份用户的密码’, MASTER_LOG_FILE=’填入上面获取File的内容’,MASTER_LOG_POS=同样填入Position内容;下面是一个例子：CHANGE MASTER TO MASTER_HOST = ‘192.168.1.1’, MASTER_USER = ‘slave1’, MASTER_PASSWORD = ‘1234’, MASTER_LOG_FILE=’mysql-bin.000005’,MASTER_LOG_POS=327;第五步：启动 slave在mysql的命令行模式下输入：start slave;第六步：查看从服务器是否正常运行在 mysql 的命令行模式下，运行以下命令：show slave status\\G请务必确保 Slave_IO_Running 和 Slave_SQL_Running 的值都是 yes ，就表示成功了，如果任何一个是 NO 那就说明没有成功。博主由于没有将WordPress进入维护模式，所以File和Position数值变化导致启动失败。第七步：测试是否同步这步很简单，进入A服务器的phpmyadmin随便改一下数值然后进B服务器查看，若数值变为你更改的数值，即确保A和B处于备份状态。第八步：双机互相同步就是将A服务器看作从服务器，B服务器看作是主服务器配置一遍就行。"},{"title":"为WordPress启用Service Worker","date":"2018-07-01T13:47:00.000Z","url":"/wordpress-enabled-service-worker.html","tags":["Wordpress","Develop","Web"],"categories":["折腾记录"],"content":"Service Worker是Google推出的一项技术。Service Worker是浏览器在后台独立于网页运行的脚本，它打开了通向不需要网页或用户交互的功能的大门。但是对于博客来说我们只需要用到Service Worker缓存功能，加速网站的二次访问。从上面的加载情况看，除去Bing的每日一图，其他文件共15k，其中gif和png图都未配置Service Worker，实际请求会更小注：Service Workers只有在HTTPS的前提下才能发挥作用加入sw-toolbox核心至WordPress下载sw-toolbox.js并且放到根目录创建缓存规则在根目录下创建serviceworker.js，并且写入下面内容（以下均为参考，具体配置请根据情况进行配置）启用Service Workers打开主题文件所在目录，修改footer.php，在前加入以下代码以上就是WordPress启用Service Worker的方法，由于WordPress是动态博客所以实现断网访问有些困难，博主我很菜，所以暂时无法实现断网访问（摊手"},{"title":"博客一年记录","date":"2018-07-01T09:39:15.000Z","url":"/one-year-record.html","tags":["博客记录"],"categories":["站长杂谈"],"content":"随着光阴荏苒，博客已经建立了1年了，在这一年中我从一个什么都不知的小白，逐渐提升到了略懂Web的小白（｡ò ∀ ó｡），也走完了高中最后的一学期，这一年来一切都有了新的变化，有很多收获，当然也有许多不足。博客从凌乱不堪逐渐的变为简洁明了，加载速度也从龟速提升至2s，抛弃了绚丽多彩的主题转向纯色的主题，现在博客挂在位于西雅图的Vultr节点，虽然速度不理想，但不再出现几天一崩的情况，我也结交了许多朋友\\^O^/，感谢各位友人与我一同探索互联网(๑&gt;؂&lt;๑）。 无论如何，感谢你能读到最后。让我们继续加油吧！"},{"title":"Bing每日一图API","date":"2018-06-27T13:50:36.000Z","url":"/bing-daily-picture-api.html","tags":["API","Lab","PHP"],"categories":["折腾记录"],"content":"什么是Bing每日一图相信大家在访问Bing搜索的时候都会看到非常漂亮的背景图，由于Bing的背景图每天都会变，于是称为Bing每日一图。调用方法此API只支持https调用，国外地区访问使用CF节点。 所有参数均仅适用于以 GET 方式进行请求 可直接插入img标签中请求地址：调用参数：参数代码参数含义可用参数rand是否随机显示最近8天内的图片true or Do not fill inday显示指定的最近图片-1，0，1，2，3，4，5，6，7(0为今天，-1为昨天)size指定获取图片大小详见下方可用分辨率info获取图片基础信息（json格式）true or Do not fill in以上所有参数均非必要，默认参数为 rand=false，day=0，size=1920x1080，info=false可用分辨率：1920×10801366×7681280×7681024×768800×600800×480768×1280720×1280640×480480×800400×240320×240240×320注：中间的x为英文字母x调用示例：默认调用： 不带任何参数调用 Info调用：（例） 调用链接：{title:”Concrete dinosaurs along Old Route 66 in Holbrook, Arizona (© Gary Warnimont/Alamy)”,url:”\\_EN-US9038296644\\_1920x1080.jpg&quot;,link:”:”20180627”，api author:”Otstar”,api author link:”;}随机调用： 调用链接： Code&lt;?php//判断是否随机调用if ($_GET[‘rand’]===’true’) {$gettime = rand(-1,7);}else {//若不为随机调用则判断是否指定日期$gettimebase = $_GET[‘day’];if (empty($gettimebase)) {$gettime = 0;}else {$gettime = $gettimebase;}}//获取Bing Json信息$json_string = file_get_contents(‘;.$gettime.&#39;&amp;n=1&#39;);//转换为PHP数组$data = json_decode($json_string);//提取基础url$imgurlbase = “;.$data-&gt;{&quot;images&quot;}\\[0\\]-&gt;{&quot;urlbase&quot;};//判断是否指定图片大小$imgsizebase = $GET[‘size’];if (empty($imgsizebase)){    $imgsize = “1920x1080”;}else {    $imgsize = $imgsizebase;}//建立完整url$imgurl = $imgurlbase.”“.$imgsize.”.jpg”;//获取其他信息$imgtime = $data-&gt;{“images”}[0]-&gt;{“startdate”};$imgtitle = $data-&gt;{“images”}[0]-&gt;{“copyright”};$imglink = $data-&gt;{“images”}[0]-&gt;{“copyrightlink”};//判断是否只获取图片信息if ($_GET[‘info’]===’true’) {    echo “{title:”.$imgtitle.”,url:”.$imgurl.”,link:”.$imglink.”,time:”.$imgtime.”api author:Otstar,api author link:;}&quot;;}else {//若不是则跳转url    header(“Location: $imgurl”);}"},{"title":"iframe延迟加载","date":"2018-06-16T12:24:49.000Z","url":"/iframe-lazy-loading.html","tags":["JavaScript","HTML/CSS"],"categories":["折腾记录"],"content":"由于原本的个人主页太丑，于是换了新的，并且准备利用一款JS制作About页，为了能让主页拥有更快的访问速度，于是便分离Home页和About页，先前是等页面完成Load后加载iframe，但为了照顾流量党便采用点击后加载的方式。不懂JS于是踩了很多坑∑(￣□￣)流程设计A标签点击 -&gt; 显示Loading.gif并将iframe标签插入指定div中 -&gt; iframe加载完成后跳转指定锚点，隐藏Loading.gif并触发更改A标签使A标签直接指向指定锚点，避免iframe重新加载CodeAbout//初始A标签触发的functionfunction about() {//显示Loading动画document.getElementById(\"about-load\").style.display = \"block\";//将iframe插入id为about-div的div中，并加载iframe，完成后触发aboutload的functiondocument.getElementById(\"about-div\").innerHTML = ''}//iframe加载完成后触发function aboutload() {//隐藏Loading动画document.getElementById(\"about-load\").style.display = \"none\";//跳转about锚点location.href = \"#about\";//更换初始A标签，使其直接指向about锚点（突然发现A标签都可以直接跳转锚点，然而我还用js模拟href(=_=)）document.getElementById(\"about1\").innerHTML = 'About';}至此，点击加载iframe已完成，不需要用到jQuery，省下了部分加载时间。为了弄这个我Google了好久( ＿ ＿)ノ，我果然还是菜鸡(￣▽￣～)"},{"title":"写在2018年高考前","date":"2018-06-05T15:10:15.000Z","url":"/written-before-the-2018-college-entrance-examination.html","categories":["站长杂谈"],"content":"即将高考了，要和苦逼的高中生活说再见了，博主是一只偏科严重的菜鸡(＠￣ー￣＠)，并且也在相对较好的数学和理综上也没有太多优势，目前已对本一不抱太大的希望了(´-ωก`)。 用心学习中怎么可能(ﾉ_ )ﾉ，即将高考，祝愿各位友人高考成功。(:з」∠)_ [alert-success]把一切都看做是生活的小事情，没什么大不了，沉静下来。[/alert-success] 下面有一些考试的建议没用的东西，可看可不看(〜￣▽￣)〜1、反复检查试卷是否有漏做 2、正确填涂答案 3、你的闹钟要调好 4、也许你会紧张但一定要冷静 5、考试之前在座位上闭目养神 6、不要一直喝水 7、过了上午考完后睡个午觉 8、不要左顾右盼 9、如果有题目不会先跳过等最后做 10、玩笔能缓解考试中的压力 11、吃饭的时候少喝点水 12、鸡极听老师的安排 13、以上13条的第一个字连起来读，这就是给你的忠告"},{"title":"Toastr.js For WordPress","date":"2018-04-28T05:57:13.000Z","url":"/toastr-js.html","tags":["Wordpress","Develop"],"categories":["折腾记录"],"content":"Toastr.js是一个Toast通知的JS，当初是站长我在Github上找到，为了能让通知简明快速地到达访客眼中，并且设置方便，于是经过几天折腾终于完成了Toastr.js For WordPress。(๑&gt;؂&lt;๑）特性WordPress后台设置页面。能指定某些页面开启。通知动画可更改。还有。。还有。。好像没了～(￣▽￣～)~截图 Demo项目地址Github 欢迎 star (^_^)鸣谢Toastr.js===2018-06-09更新=== 最近发现本插件在运行时报错，最近将会修复"},{"title":"The Fox主题汉化分享","date":"2018-04-12T14:58:29.000Z","url":"/the-fox-theme-chinese-share.html","categories":["分享推荐"],"content":"同Flow Theme，此主题是我之前从云核淘到的，由于设置是英文，不方便修改定制，所以机翻了后台设置部分，主题包含插件比较大所以就不发了，只发汉化的文件。演示地址:下载地址: 若链接失效请到云核搜索下载汉化文件下载地址: 注:此文件请放到The Fox的admin文件夹内，机翻，翻译可能出错，莫怪。"},{"title":"Flow Theme分享","date":"2018-03-21T16:34:59.000Z","url":"/flow-theme-e5-88-86-e4-ba-ab.html","categories":["分享推荐"],"content":"由于我博客主题单调想更换主题，经寻找发现Flow主题功能强大并且较小，使用后发现是英文，于是翻译了后台设置方便设置（机翻，未修改）演示地址:下载地址:由于学校坑比的网速暂时没上传，需要的可以发邮件至otstar@syfxlin.win索要，这周六晚上上传。[alert-note]由于主题加载调用问题导致加载会会很久，应该是ajax加载问题，主题文件非常零散，有能力的可以尝试修改。[/alert-note]"},{"title":"[青空之蓝-2017]-崭新","date":"2017-12-31T08:23:32.000Z","url":"/e9-9d-92-e7-a9-ba-e4-b9-8b-e8-93-9d-2017-e5-b4-ad-e6-96-b0.html","tags":["年度总结"],"categories":["站长杂谈"],"content":"[hermit autoplay=”false” mode=”circulation” preload=”auto”]netease_songlist#:721137[/hermit] 转眼就到了年末的最后一天，距建站之初已经有6个月了，回顾一下2017吧。。。往事2017年的某天我的酷派大神F2被盗，无奈的我从手中购入大神Note3，由于WIFI实在辣鸡（蹭学校的WIFI，我是住宿生，买不起移动的坑比流量～(￣▽￣～)~）于是准备购入中继器，但由于中继器无法接入802.1x认证，所以经某人推荐购入香橙派，但作为好奇青年这派只能用来做私有云中继器实在暴殄天物，受[树莓香橙香蕉派]群友的影响，我知道了WordPress以及类似的博客系统 我还记得当初的我是多么激动的装上LAMP的，点开WordPress地址，寻找主题插件，但是那时只是局限于局域网，机缘巧合下我知道了虚拟主机，于是乎博客经一番折腾后被搬到了免费的虚拟主机上，那天正好是7月1日 时间过去11日免费虚拟主机供应商改版，我的虚拟主机被迫转移，经推荐我购入HostDare这个坑比的VPS，转移后博客稳定运行了1个多月，随后便是数据库崩溃，重装系统碰巧遇到钻石盘，联系客服后免费更换成更贵的KVM，当初我还吹了几天（因为价格。。。），之后才知道这是个坑，就在12月初博客又一次崩溃，无奈的我只能将博客转移至Virmach（12月购买用来翻墙）站点站点经历的一些大事件上方已经说了，小事就在这里写吧(●—●)7月建站3次转移博客博客被谷歌，必应，雅虎，神马收录，垃圾百度丝毫不理我（谷歌真的良心，提交sitemap后的3个小时就收录了）使用麦客表单进行友链统计（主要防止站点崩溃带来的友链损失）方便整理开启HTTPS，不使用HSTS的原因就不说了，换了宝塔的SSL证书（LE的证书配置太慢(ﾉ_ _)ﾉ）昨天接入Cloudflare CDN，速度飞起没有了。。。(●°u°●)友人友链9个，突然发现一个友链不见了，等下赶紧补上(ŐдŐ๑)已补上 为何这么少呢?因为我懒。。。 首先感谢开发群的群友们，没有你们就没有这个博客(๑&gt;؂&lt;๑） 另外感谢9位博主，谢谢你们能与我共度在互联网的时光。。。未来我是一位高三学生，明年的6月就要参加高考了（neoFelhz与Nita同届，目前我就知道这两位是同届的）所以到高考完前就没有太多的时间打理博客，可能会吃灰半年～(￣▽￣～)~，虽说是福建考生但是一本基本无望，成绩实在苦逼说下高考完的计划吧。。。学习java，php，C++优化博客没了。。。实在想不到其他(^_^)尾声写了一个小时。。。 沉迷学习(:з」∠)无法自拔的我在18年可能会很少更新文章，这篇文章是对过去的总结和未来的期待，开站到现在也只有这一次这么用心写文章过。。。 无论如何，感谢你能读到最后。新的一年，让我们继续加油吧！另外祝愿与我同届的友人高考成功。。。"},{"title":"调教火龙810-降低发热（已更）","date":"2017-12-23T15:08:27.000Z","url":"/e8-b0-83-e6-95-99-e7-81-ab-e9-be-99810-e9-99-8d-e4-bd-8e-e5-8f-91-e7-83-ad.html","tags":["Nubia Z9Max","骁龙810"],"categories":["折腾记录"],"content":"上个星期由于我的小米4给了我老妈，经过“慎重”思考入手Nubia Z9Max，其实原本想入Z9的可惜Money不足，于是入手Z9Max（没有快充，不是无边框，但是支持SD卡槽，只有这个可以点赞）进入正题基本参数Qualcomm MSM8994 Snapdragon 8104x Quad-core 2.0 GHz ARM®Cortex™ A57 （big）@ 1.96GHz and 4x quad-core 1.5 GHz ARM®Cortex™ A53（LITTLE）@ 1.56GHz；Adreno 430 GPU；X10 LTE modem；20nm LMP探索发热源头经过一星期的测试及日常使用，发现发热并没有想象中的严重，可能是天气太冷了吧，至少比我2年前的酷派8190Q(MTK6589)好很多开启4小核锁住4大核，日常使用55℃开启4小核只开1大核，日常使用63℃开启4小核只开2大核，日常使用68℃超过2个大核长期在线的话温度直接上升20℃达到可怕的85℃高通吧吧主做过烤机测试，结果如下单个 2GHz A57 核心，满载坚持 1 分多钟后达到 105℃ 左右，没有降频，但直接就重启了。两个 2GHz A57 核心，最多不到 5 秒钟就冲到 105℃ ，然后重启。A53 核心就好多了，1.56GHz 频率下单个满载不超过 50℃，双核大约 50℃ ，四核也才 61℃ ，都过得去。所以发热的根源在于4个A57大核，但是如果4个A57都不在线，开启应用时及快速滑动列表时会出现严重掉帧现象，所以不能完全锁住4个A57动手!我个人不喜欢任何国产OS，所以扳掉Nubia UI刷入RR-OS及Mokee，以下的所有操作都是在RR和Mokee下操作的。RR经过我使用发现一个问题就是关屏待机时A57会全部掉线，无法重新打开，必须重启，目前用以下方法应该可以解决（目前正在测试）经测试锁核问题是msm_thermal引起的，以下命令可成功解锁。#执行以下命令chmod 666 /sys/devices/soc.0/qcom,bcl.61/modeecho -n disable &gt; /sys/devices/soc.0/qcom,bcl.61/modechmod 444 /sys/devices/soc.0/qcom,bcl.61/modechmod 666 /sys/module/msm_thermal/core_control/enabledecho 0 &gt; /sys/module/msm_thermal/core_control/enabledchmod 444 /sys/module/msm_thermal/core_control/enabled另外使用高通锁核方案这个APP锁核后重新开核貌似也可以做到。调教方案偶然在酷安看到有酷友分享的调度，经2星期测试，基本不存在卡顿，发热虽然还是严重但已经不再过热降频（注:此次更新写于4月中旬，坐标泉州 亚热带）方案地址: "},{"title":"博客崩溃记录","date":"2017-12-16T13:22:20.000Z","url":"/e5-8d-9a-e5-ae-a2-e5-b4-a9-e6-ba-83-e8-ae-b0-e5-bd-95.html","categories":["站长杂谈"],"content":"就在今天我的博客莫名其妙地崩溃了，hostdare的vps实在坑，之前由于ovz超卖，导致钻石盘重装了好几次系统都没用，之后联系了支持人员，支持人员更换成kvm,时间过了几个月，今天又出现了莫名其妙的变成其他系统并且无法重装，目前我已经提交撤销申请，现在博客挂在virmachVultr，目前我的vps只是临时使用的，明年的3月1日到期，届时我会将vps升级，另外virmach的vps还不错。垃圾virmach，目前Vultr按时计费特舒服～(￣▽￣～)~"},{"title":"小米手机底部按键出错解决方法","date":"2017-10-26T04:45:18.000Z","url":"/e5-b0-8f-e7-b1-b3-e6-89-8b-e6-9c-ba-e5-ba-95-e9-83-a8-e6-8c-89-e9-94-ae-e5-87-ba-e9-94-99-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95.html","categories":["折腾记录"],"content":"大家都知道小米的原装屏幕很贵，其实是因为触控芯片贵，所以有些商家就弄出了“非原装芯片”，也使小米手机用户不再心疼屏幕碎了，但是这也带来了一些问题，由于非原装芯片只对MIUI系统设计，所以刷第三方rom就会遇到按键出错的问题。由于我前一部手机z90疯狂闪退，入手二手小米4，刷入第三方rom后发现按键出错，经过不懈搜索我终于找到可以改键的xposed模块（其实我早就在使用(:з」∠)）教程开始下载xposed框架安装，激活xposed edge pro模块，重启进入xposed edge软件，勾选按键点击按键，进入按键设置菜单，我的是小米4，底部最近任务键被映射到菜单键，主页键被映射到跳转顶部键，一波调教后按键恢复正常这种方法支持所有手机，前提是要能激活xposed并正常使用，另外Android8.0还没有框架，所以要想改键的话还是放弃8.0吧[button-blue url=”; target=”_blank” position=”central”]xposed edge下载[/button-blue]密码:0000"},{"title":"Hermit X播放器","date":"2017-10-04T15:21:44.000Z","url":"/hermit-x-e6-92-ad-e6-94-be-e5-99-a8.html","categories":["分享推荐"],"content":"Hermit X，使用 APlayer 前端播放器，Meting Framework &amp; LWL API 后端支持的全新 WordPress 播放器，支持网易云音乐https。特性：支持直接调用网易云音乐、虾米音乐、QQ音乐、酷狗音乐、百度音乐的单曲/专辑/歌单 以及本地音乐（且即将支持 ） WordPress深度整合，最低三键即可调用 与 APlayer 保持同步更新，兼容 APlayer 所有功能 音乐 API 更新迅速，始终保持高可用性 支持自动歌词获取（网易云音乐&amp;虾米音乐支持歌词翻译！） 网易云音乐、虾米音乐支持 HTTPS 调用项目地址： 转载于:"},{"title":"小米4 RR-OS评测","date":"2017-10-01T17:16:29.000Z","url":"/e5-b0-8f-e7-b1-b34-rr-os-e8-af-84-e6-b5-8b.html","tags":["RR-OS","小米4"],"categories":["折腾记录"],"content":"由于我之前用的垃圾z90不常用软件不闪退，常用的软件用没一分钟就闪退，实在是特别不爽，坑比的大神note3又因为wifi信号问题不能胜任常用机，好在同学收购了我的大神note3，使得我有钱可以购入二手的小米4(๑&gt;؂&lt;๑），另外我特别不喜欢使用MIUI系统，所以刷入RR-OS（原本我是打算刷win10 mobile，但考虑到软件硬伤所以还是原因安卓，等有了新的主力机后会刷入win10）刷机手机经过漫长的等待，其实就两天(｢･ω･)｢，终于到了我的手上，经过一番验机，确认是正品，从MIUI论坛搞到rec，经过不久的刷开发板，刷rec，刷RR-OS后手机终于是进入了全新的世界   问题解决刷入RR-OS后有发现一个问题任务键和主页键被映射到其他按键上，由于是二手机，我并不知道手机是否换过屏幕所以无法知道是否是硬件问题，但是7.1已经有了xposed，既然有了xposed那还怕什么，改改改。。。   使用xposed edge插件成功改键使用体验系统没有什么大毛病，就是发热严重，另外cpu调度有点坑，没开游戏系统动态开核，一开游戏立马锁两核→_→，不知是ppsspp的问题还是系统问题（我只测试过ppsspp，之后会测试一些耗性能的游戏） 待机无敌，经过两天的测试待机基本不会掉电，使用时掉电也不快，连续重度使用两小时掉35%电量 充电方面没有测试，因为我没有6pin数据线，没法测试9v快充性能，但是5v 2a充电速度还不错，20分钟冲20%电总结如果是想要稳定使用的话还是MIUI9会比较好用，但是如果你是一个像我一样没有xposed，没有原生系统，不能个性定义系统就不能好好使用手机的人，那么RR-OS非常适合你，RR有非常多的自定义选项可以自己打造系统界面，优化使用体验。"},{"title":"私有云搭建小记","date":"2017-09-09T16:45:09.000Z","url":"/e7-a7-81-e6-9c-89-e4-ba-91-e6-90-ad-e5-bb-ba-e5-b0-8f-e8-ae-b0.html","tags":["Aria2","frp","NAS","Nextcloud","Orange Pi"],"categories":["折腾记录"],"content":"之前我写了家用NAS的搭建教程，但这只是最基本的NAS，只是拥有远程下载的ftp服务器而已，这篇文章会教大家搭建完全的私有云，解决方案为Nextcloud+Aria2+frp穿透+远程ssh如果还没配置好环境的请先照着OrangePi搭建NAS系列完成环境搭建。Nextcloud搭建更新apt updateapt upgrade安装LAMP环境sudo apt-get install apache2 apache2-utilssudo apt-get install libapache2-mod-php5 php5 php-pear php5-xcache php5-mysql php5-curl php5-gdsudo apt-get install mysql-serversudo apt-get install phpmyadmin安装Nextcloudcd /var/www/htmlwget  nextcloud-12.0.2.zip浏览器访问 然后填入相关参数使用mysql数据库，等待片刻浏览器会自动跳转，跳转成功后就完成nextcloud的安装。aria2请参照OrangePi搭建NAS进行安装frp内网穿透由于现在的ISP基本都是网中网，只是用DDNS根本无法正常从外网访问，所以就需要内网穿透，因为ngrok搭建相对麻烦所以我选择frp。首先你需要一个外网的服务器 SSH连接上外网主机后，使用wget指令下载frp。wget \\_0.13.0\\_linux_amd64.tar.gz使用tar指令解压tar.gz文件tar -zxvf frp_0.13.0_linux_amd64.tar.gz使用cd指令进入解压出来的文件夹cd frp_0.13.0_linux_amd64.tar.gz外网主机作为服务端，可以删掉不必要的客户端文件，使用rm指令删除文件。rm -f frpcrm -f frpc.ini接下来要修改服务器配置文件，即frps.ini文件。使用nano指令对目标文件进行编辑。vi frps.ini打开frps.ini后可以看到默认已经有很多详细的配置和示范样例，该文章仅以达到内网穿透为目的，所以这里选择删掉或注释掉里面的所有内容，然后根据使用的情况，按照官方的中文文档添加以下配置。[common]bind_port = 7000vhost_http_port = 8080[common]部分是必须有的配置，其中bind_port是自己设定的frp服务端端口，vhost_http_port是自己设定的http访问端口。 保存上面的配置后，使用以下指令启动frp服务端。（如果需要在后台运行，请往下翻阅关于后台运行的部分。）./frps -c ./frps.ini服务端的工作就到此结束了。 客户端 客户端前面的操作和服务端是一模一样的，这里不一一解释。wget \\_0.13.0\\_linux_386.tar.gztar -zxvf frp_0.13.0_linux_386.tar.gzcd frp_0.13.0_linux_386rm -f frpsrm -f frps.ininano frpc.ini客户端的配置如下[common]server_addr = x.x.x.xserver_port = 7000[ssh]type = tcplocal_ip = 127.0.0.1local_port = 22remote_port = 6000[web]type = httplocal_port = 80custom_domains = web.syfxlin.win[aria2]type = httplocal_port = 6800custom_domains = aria2.syfxlin.win上面的配置和服务端是对应的。 [common]中的server_addr填frp服务端的ip（也就是外网主机的IP），server_port填frp服务端的bind_prot。 保存配置，输入以下指令运行frp客户端。（同样如果需要在后台运行，请往下翻阅关于后台运行的部分。）./frpc -c ./frpc.ini此时在服务端会看到”start proxy sucess”字样，即连接成功。 现在可以用SSH通过外网主机IP:6000建立SSH连接。通过浏览器访问8080端口访问web网站 让frp在后台运行 虽然现在frp运作起来了，内网穿透也实现了，但这还是不够的。此时如果断开与服务端或者客户端的SSH连接（比如关掉了Xshell）也就中止了frp的运行。 保持frp运行是关键是让服务端的frp和客户端的frp在后台运行，使用screen让frp在后台运行 首先使用screen指令创建一个会话。screen -dmS frp然后进入这个会话。screen -r frp最后使用运行frp的指令(如果之前断开了SSH连接，记得用cd指令进入frp的目录先。)./frps -c ./frps.ini这样就让frp在后台运行了。 [alert-warning]其实已经更完了，假装未完成(๑&gt;؂&lt;๑）[/alert-warning]"},{"title":"文末版权声明插件","date":"2017-09-08T16:18:46.000Z","url":"/e6-96-87-e6-9c-ab-e7-89-88-e6-9d-83-e5-a3-b0-e6-98-8e-e6-8f-92-e4-bb-b6.html","tags":["Wordpress"],"categories":["分享推荐","新奇趣闻"],"content":"嗯，很“泛滥”的一个小功能，原本想直接弄代码，但是考虑到wordpress主题升级会将写入的代码覆盖，所以直接弄成插件，既方便又安全。 [su_button url=”; style=”ghost” color=”#2D89EF” size=”9” radius=”5” text_shadow=”0px 0px 0px #000000”]下载[/su_button]"},{"title":"更新说明","date":"2017-09-07T05:15:24.000Z","url":"/e6-9b-b4-e6-96-b0-e8-af-b4-e6-98-8e.html","categories":["站长杂谈"],"content":"本站站将于近期进入慢更时期，预计一年后重新进入正常状态。 博主现已无心打理(放屁╮(￣▽￣)╭)因为进入了高三，我不是特长生，而且也不是所谓的学霸，为了明年6月的高考，我不得不学习，我有空的话会更新一到两篇博文，再见各位朋友。。 站点一星期一到两更，繁重的学习没办法，而且这次月考史上最差才374(｡•́︿•̀｡) ===2018-06-08更新=== 以上都是废话了，解放了，苦逼的高中生活再不见。～(￣▽￣～)~"},{"title":"dietpi系统使用小记","date":"2017-09-02T06:33:38.000Z","url":"/dietpi-e7-b3-bb-e7-bb-9f-e4-bd-bf-e7-94-a8-e5-b0-8f-e8-ae-b0.html","tags":["dietpi"],"categories":["折腾记录"],"content":"dietpi系统作为树莓派，香橙派等开发板的系统，有着许多优点，但也有缺点，今天就我来为大家评测下，由于装载dietpi的orange pi pc2没有电源线（因为我的电源线用在lite上了）所以没截图，之后我会补图的，见谅。dietpi系统十分轻量化，基于广受好评的armbian构建工具构建的系统，进行优化，dietpi有其特殊的应用商店和一系列工具使安装配置环境或软件非常简单，十分懒的人可以选择入手dietpi系统。优点系统开启速度比armbian快许多，DietPi针对最小的CPU和RAM资源使用进行高度优化，确保开发板能始终运行在最好的情况。DietPi程序使用轻量级Whiptail菜单。你会花更少的时间盯着命令行，更多的时间享受DietPi。dietpi-software这里我用dietpi的一大原因，能快速，轻松地安装“准备运行”并针对您的系统进行优化的流行软件。像OMV NAS环境，Wemim环境，LAMP，LEMP，Nextcloud，Wordpress等都可以快速搭建。dietpi-backup快速备份系统，防止配置错误后的折腾，省去用电脑读取img镜像的时间。缺点其中最强大也是最危险的缺点莫过于开机有几率丢失Dietpi文件夹，这个文件夹丢失可以说是对dietpi的一个重大打击，丢失后所有从dietpi-software安装的软件都无法运行，因为这些软件启动是通过dietpi文件夹里的一个脚本启动的，我两度遇上这个问题，一旦开机电流不够遇上这个问题的几率就非常大，修复方法我没试过，遇上这个问题的可以试试。方法如下注:没有备份系统的以下方法无用。 由于Dietpi文件夹丢失dietpi-backup就启动不了所以抓取dietpi-backup脚本wget  -O /root/dietpi-backupchmod +x /root/dietpi-backup运行脚本，进行恢复/root/dietpi-backup以上方法不一定能成功===2018-05-31更新=== Dietpi系统已不在提供OrangePi的完整镜像，需要从Armbian构建，通过Dietpi官方脚本构建，目前尚未测试，预计在7月会测试。 ===2018-06-08更新=== 我的Orange Pi PC2已摔，所以测试是不存在的了。"},{"title":"Orange Pi搭建NAS(7)-Aria2远程下载","date":"2017-07-23T04:57:36.000Z","url":"/orange-pi-e6-90-ad-e5-bb-banas7-aria2-e8-bf-9c-e7-a8-8b-e4-b8-8b-e8-bd-bd.html","tags":["Orange Pi"],"categories":["折腾记录"],"content":"Aria2是一个轻量级命令行下载工具，支持HTTP / HTTPS，FTP，SFTP，BitTorrent和Metalink下载，但是不支持ed2k，支持JSON-RPC和XML-RPC调用，可以远程控制。一、安装Aria2安装命令apt-get install aria2创建 aria2 配置文件 “/home/用户名/.aria2/aria2.conf” 和 “/home/用户名/.aria2/aria2.session”这个文件。mkdir /home/用户名/.aria2touch /home/用户名/.aria2/aria2.sessionnano /home/用户名/.aria2/aria2.conf配置文件内容如下# 基本配置# 下载目录dir=/home/用户名/nas-data/aria2# 下载从这个文件中找到的urls, 需自己建立这个文件# touch /home/用户名/.aria2/aria2.sessioninput-file=/home/用户名/.aria2/aria2.session# 最大同时下载任务数，默认 5#max-concurrent-downloads=5# 断点续传，只适用于 HTTP(S)/FTPcontinue=true# HTTP/FTP 配置# 关闭连接如果下载速度等于或低于这个值，默认 0#lowest-speed-limit=0# 对于每个下载在同一个服务器上的连接数，默认 1max-connection-per-server=5# 每个文件最小分片大小，例如文件 20M，设置 size 为 10M, 则用2个连接下载，默认 20M#min-split-size=10M# 下载一个文件的连接数，默认 5#split=5# BT 特殊配置# 启用本地节点查找，默认 falsebt-enable-lpd=true# 指定最大文件数对于每个 bt 下载，默认 100#bt-max-open-files=100# 单种子最大连接数，默认 55#bt-max-peers=55# 设置最低的加密级别，可选全连接加密 arc4，默认是头加密 plain#bt-min-crypto-level=plain# 总是使用 obfuscation handshake，防迅雷必备，默认 falsebt-require-crypto=true# 如果下载的是种子文件则自动解析并下载，默认 true#follow-torrent=true# 为 BT 下载设置 TCP 端口号，确保开放这些端口，默认 6881-6999listen-port=65298#Set UDP listening port used by DHT(IPv4, IPv6) and UDP trackerdht-listen-port=65298# 整体上传速度限制，0 表示不限制，默认 0#max-overall-upload-limit=0# 每个下载上传速度限制，默认 0#max-upload-limit=0# 种子分享率大于1, 则停止做种，默认 1.0#seed-ratio=1# 做种时间大于2小时，则停止做种seed-time=120# RPC 配置# 开启 JSON-RPC/XML-RPC 服务，默认 falseenable-rpc=true# 允许所有来源，web 界面跨域权限需要，默认 falserpc-allow-origin-all=true# 允许外部访问，默认 falserpc-listen-all=true# rpc 端口，默认 6800rpc-listen-port=6800# 设置最大的 JSON-RPC/XML-RPC 请求大小，默认 2M#rpc-max-request-size=2M# rpc 密码，可不设置#rpc-passwd=raspberry# rpc 用户名，可不设置#rpc-user=aria2pi# 高级配置# This is useful if you have to use broken DNS and# want to avoid terribly slow AAAA record lookup.# 默认 falsedisable-ipv6=true# 指定文件分配方法，预分配能有效降低文件碎片，提高磁盘性能，缺点是预分配时间稍长# 如果使用新的文件系统，例如 ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only), falloc 是最好的选择# 如果设置为 none，那么不预先分配文件空间，默认 preallocfile-allocation=falloc# 整体下载速度限制，默认 0#max-overall-download-limit=0# 每个下载下载速度限制，默认 0#max-download-limit=0# 保存错误或者未完成的下载到这个文件# 和基本配置中的 input-file 一起使用，那么重启后仍可继续下载save-session=/home/pi/.aria2/aria2.session# 每5分钟自动保存错误或未完成的下载，如果为 0, 只有 aria2 正常退出才回保存，默认 0save-session-interval=300# 若要用于 PT 下载，需另外的配置，这里没写RPC调用加入验证（外网调用最好加上验证），可以使用token验证# token验证rpc-secret=secret运行 aria2, 测试配置是否有错误，如果没有提示任何错误信息，那就按Ctrl+C停止。 aria2c –enable-rpc –rpc-listen-all=true –rpc-allow-origin-all -c 如果执行上述命令正常后加-D参数让其正常工作。 aria2c –enable-rpc –rpc-listen-all=true –rpc-allow-origin-all -c -D二、安装Aria2网页端安装配置LAMP为了方便使用网页端，以及后续的nextcloud需要安装Apache+MySQL+PHP 安装Apachesudo apt-get install apache2安装mysqlsudo apt-get install mysql-serversudo apt-get install php5sudo apt-get install php5-mysql注:Ubuntu内核的只有php7.0AriaNg的安装下载源码包，直接丢进lamp的目录即/var/www/html中即可 "},{"title":"Orange Pi搭建NAS(6)-文件共享","date":"2017-07-17T04:23:41.000Z","url":"/orange-pi-e6-90-ad-e5-bb-banas6-e6-96-87-e4-bb-b6-e5-85-b1-e4-ba-ab.html","tags":["Orange Pi"],"categories":["折腾记录"],"content":"为了方便访问树莓派的存储设备，有必要为其添加文件共享，下面为给出三种文件访问方法：samba，ftp。我不太推荐samba虽然它在电脑上不需要客户端但对于小白来说配置samba就是个噩梦，下文我也会给出samba的安装方法。FTP安装vsftp，开源的轻量级的常用ftp服务器sudo apt-get install vsftpd先备份，然后编辑配置文件sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.origsudo nano /etc/vsftpd.confvsftp的配置文件，它允许你设置所有类型的限制和策略，目前没有深入研究，修改如下# 不允许匿名访问anonymous_enable=NO# 设定可以进行写操作write_enable=YES# 设定本地用户可以访问local_enable=YES为了root账户也能访问FTP需要修改/etc/ftpuserssudo nano /etc/ftpusers把root那行注释掉……#root……重启vsftpdsudo service vsftpd restart通过ftp连接树莓派系统，以用户名登录，密码是用户的密码。ftp的根目录是/home/用户名，即用户的HOME目录，可上传或下载文件了。Samba安装samba所需软件sudo apt-get install samba samba-common-bin先备份，然后编辑/etc/samba/smb.conf文件sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.baksudo nano /etc/samba/smb.conf创建shares文件夹mkdir /home/用户名/nas-data/DLNA/shares需要修改添加的内容如下，[global]security = userencrypt passwords = trueguest account = nobodymap to guest = bad user#======================= Share Definitions =======================[share]comment = Guest access sharespath = /home/用户名/nas-data/sharesbrowseable = yeswritable = yes#read only = yesguest ok = yespublic = yes[NAS-Data]comment = Nas data folderpath = /home/用户名/nas-data/browseable = yeswritable = yesvalid users = root 你的用户名share共享目录访问不需要密码，而NAS-Data访问需要验证，用户为root和你的用户名。 最后重启samba服务。然后同一局域网的其他设备就可以访问RPi的共享目录sudo service samba restartAndroid可以使用ES File Explorer，IOS可以使用FileExplorer, FileBrowser, Documents和Remote File Free，或其他支持访问共享的文件管理器。"},{"title":"Orange Pi搭建NAS(5)-UPNP/DLNA多媒体","date":"2017-07-16T05:11:17.000Z","url":"/orange-pi-e6-90-ad-e5-bb-banas5-upnpdlna-e5-a4-9a-e5-aa-92-e4-bd-93.html","tags":["Orange Pi"],"categories":["折腾记录"],"content":"安装miniDLNAsudo apt-get install miniDLNA上面安装的miniDLNA默认是不支持rmvb格式的视频，所以我们最好自己下载源代码，只需要做很少改动就可以支持rmvb，然后编译安装。 编译安装比较麻烦，我也没成功，想支持rmvb，参考先备份然后编辑配置文件sudo cp /etc/minidlna.conf /etc/minidlna.conf.origsudo vim /etc/minidlna.conf修改如下设置media_dir=/home/用户名/nas-data/DLNAdb_dir=/home/用户名/nas-data/DLNA/dblog_dir=/home/用户名/nas-data/DLNA/logfriendly_name=OPi DLNA创建文件夹mkdir /home/用户名/nas-data/DLNAmkdir /home/用户名/nas-data/DLNA/{Music,Pictures,Videos,db,log}最后重启miniDLNA服务sudo service minidlna restart打开计算机网络，可以看到OPi DLNA媒体设备解决mp3中文乱码用Windows Media Player(后面用WMP替代)查看minidlna多媒体服务器文件，有些中文文件名显示乱码，有些就正常。目前Linux中流行的很多播放器经常不能正确显示如歌曲名、专辑名等MP3 tag信息，经过有些工具转换后，标签又不能被Windows识别。MP3的歌曲名、艺术家、专辑名等信息都以一定的编码格式存储在MP3标签中。简单地说，乱码出现的原因就是播放器未能准确识别出MP3标签的中文编码格式。 具体的说，现在MP3文件的标签主要有几种标准：ID3v1、ID3v2（现在常见的又分为2.3和2.4）、APEv2。可以从两个角度解决这个问题。一是转换已有MP3文件的标签编码，二是使用支持GBK编码的播放软件,这种方案我没试过。 mp3tagiconv是一款可用于解决MP3乱码问题的软件。它可以自动探测MP3标签的编码，并以合理的方式重新写入，经过其处理的编码可被Linux、Windows（包括Windows Media Player）和各种移动设备正确识别。 mp3tagiconv 需要 mutagen 的支持，确保之前已经安装。sudo apt-get install python-mutagengit clone 以上就是miniDLNA的安装"},{"title":"Orange Pi搭建NAS(4)-存储设备","date":"2017-07-16T04:49:58.000Z","url":"/orange-pi-e6-90-ad-e5-bb-banas3-e5-ad-98-e5-82-a8-e8-ae-be-e5-a4-87.html","tags":["Orange Pi"],"categories":["折腾记录"],"content":"准备一块硬盘，以及一个移动硬盘盒（支持2.5/3.5寸的硬盘，以及外接供电）把硬盘分区，并格式化为ext4 格式，这样性能更好，寿命应该更长(待考证)。 由于OPi的USB口供电能力有限，所以移动硬盘需要外部供电，所以根据上面的分析对于想外接移动硬盘的人来说，有以下两种解决方案：用带电源的USB集线器，USB集线器接上电源，然后连接上RPi的USB口，移动电源接到USB集线器上。如此一来就可以连接多个移动硬盘，比如接两个移动硬盘，其中一个用来做数据备份。使用易驱线，这个只能用一个硬盘，但是不再需要移动硬盘盒。注：不建议直接用OPi为硬盘供电 由于我暂时没有硬盘。所以我用U盘进行测试，如果是移动硬盘建议格式化为ext4，U盘因为存储空间小建议格式化为FAT32这样各种设备都可读取，但由于只支持4G以下的文件，所以如果U盘只是用来作为NAS存储盘建议也格式化为ext4，由于我U盘有其他用途，我就不格式化为ext4。但建议大家可以弄个专用的移动硬盘，然后格式化为ext4格式，这样好折腾。教程开始关机，断电，插上USB移动硬盘和U盘，上电启动。然后登录SSH，查看磁盘信息， sudo fdisk –l，如果没有问题的话，会显示以下字符… … Disk /dev/sda: 62.9 GB, 62914560000 bytes … … Device Boot Start End Blocks Id System /dev/sda1 2048 122879999 61438976 83 Linux可以看到，/dev/sda为64G U盘，只有一个分区/dev/sda1 成功识别到硬盘后，可以查询文件系统类型、LABEL、UUID等信息sudo blkidArmbian应该不支持exFAT，需要安装exfat-fusesudo apt-get install exfat-fuse -y再就是设置自动挂载，需要编辑/etc/fstab，先备份sudo cp /etc/fstab /etc/fstab.origsudo vim /etc/fstab在文件最后加上下面几行内容/dev/sda1      /home/你第一次开机设置的非root账户名/nas-data如果出现中文乱码，需要加参数utf8=1，保存，最后重启。关于/etc/fstab，可以参考 创建挂载目录mkdir /home/用户名/nas-data重启sudo reboot重新登录SSH，查看挂载信息sudo mount -l会显示……/dev/sda1 on /home/用户名/nas-data type ext4 (……)表示全部挂载成功本文参考:"},{"title":"Orange Pi搭建NAS(3)-系统安装","date":"2017-07-13T16:12:40.000Z","url":"/orange-pi-e6-90-ad-e5-bb-banas3-e7-b3-bb-e7-bb-9f-e5-ae-89-e8-a3-85.html","tags":["Orange Pi"],"categories":["折腾记录"],"content":"安装操作系统Orange Pi支持的系统很多，可以从官方下载也可以下载其他的系统OrangePi one系统推荐armbian 链接 本教程以armbian系统为例下载Armbian操作系统，下载完成后解压缩得到镜像文件(.img)，然后我们需要一个工具把镜像文件烧录到SD卡上， 我知道有两款工具，Win32DiskImager，USB Image Tool，另外这两款工具还可以备份整个SD卡为一个镜像文件。下面以Win32DiskImager为例说明如何烧录把micro SD card插入读卡器中，连接上电脑. 等电脑识别后会分配一个盘符(例如G:)下载 Win32DiskImager安装下载SD Formatter 安装安装完成后以系统管理员权限运行选择之前解压缩得到的镜像文件，选择SD卡所在盘符点击Write按钮开始写入镜像文件，然后就是等待，完成后会弹出提示框注:Armbian的boot文件夹在windows不可见登录SSH把micro SD card 插入Orange Pi，插上网线，连到路由器，然后上电。由于我们没有键盘和显示器，所以需要用SSH登录，默认登陆用户名/密码：root / 1234。 但是不知道IP地址怎么办？其实我们可以从路由器设置里面得到IP地址。下面以TP-LINK为例，其他路由器类似。 进入路由器设置—&gt;DHCP服务器—&gt;客户端列表，就可以得到OPi的IP地址。 接下来用SSH客户端(Puty, SecureCRT, XShell等) 登录系统配置Armbian开机会提示你输入账户和密码输入后会提示更改密码，更改密码先输入原始1234密码，后输入自己设置的密码(输入两遍)，之后提示创建一个非root账户，按提示来就行。接下来就是更新源sudo apt-get updatesudo apt-get upgrade注：如果你想用mt7601又不想编译驱动请不要输入第二行代码汉化更新完成输入apt-get install ttf-wqy-microhei命令来获取字体包并安装 安装完毕输入aptitude install localesdpkg-reconfigure locales命令来设置系统的字体，跳出一个文字选择界面，上下翻页、空格键选择以下编码en_US.UTF-8zh_CN.GBKzh_CN.GB2312zh_CN.UTF-8然后回车确认将默认字体设置为zh_CN.UTF-8 编辑 locale 文件，输入nano /etc/default/locale进入编辑界面，把里面写着en_US.UTF-8的全部改为zh_CN.UTF-8了 然后保存重启就汉化完成了。网卡配置Armbian采用网络管理器，有GUI，输入nmtui即可开启网络管理器的GUI界面 —–至此系统已简单安装完毕"},{"title":"Orange Pi搭建NAS(2)-硬件选择与组装","date":"2017-07-11T15:09:01.000Z","url":"/orange-pi-e6-90-ad-e5-bb-banas2-e7-a1-ac-e4-bb-b6-e9-80-89-e6-8b-a9-e4-b8-8e-e7-bb-84-e8-a3-85.html","tags":["Orange Pi"],"categories":["折腾记录"],"content":"所需硬件下面列出所需硬件，注意有的是可选Orange Pi One(建议)，降低延迟选择有网口的，我因为要中继选择Lite散热片（两片）+外壳(带风扇)，一天24小时开机，这个还是有必要。5V 2A电源，官方店铺有，也可以自己买DC-0.4mm(这种口径很少见，建议直接买官方的)8 G micro SD card(class 10+)，至少class10，不然后面没得玩。移动硬盘或者U盘(如果选择硬盘要有易驱线，以及硬盘电源)[可选]USB Wifi(RTL8188eu，MT7601需要编译)[可选]各型号的资源详情: 安装步骤很简单拿起香橙派板子，看清楚各种插槽接口，搞清楚是干嘛的，小心插坏了~给cpu贴上散热片，要买那种自带粘胶的，手不要抖哦，小心贴歪了。把风扇的电源插头接到电源引脚上，然后接上电源看风扇转不。香橙派40pin接口板上有个小三角标注一号针，正极接2号针，负极接任何的GND针没什么问题就装上外壳。"},{"title":"Orange Pi搭建NAS(1)-开坑","date":"2017-07-11T14:50:28.000Z","url":"/orange-pi-e6-90-ad-e5-bb-banas1-e5-bc-80-e5-9d-91.html","tags":["Orange Pi"],"categories":["折腾记录"],"content":"入手香橙派也差不多两个月了，其实最初就是想弄一台中继，因为学校网络太坑，最开始是准备买一台T-Link 703N刷openwrt，最后发现还不如香橙派划算，于是入手香橙派。配置还行，可玩性比较高，目前这台迷你中继已经陪伴我1个月了，为什么只有一个月呢，因为各种原因(￣▽￣)这个系列教程是由我网路搜寻整理而来。主要面向跟我一样没有什么Linux基础的初级入门用户，让大家少走弯路，来自己搭建一个低成本家庭NAS多媒体服务中心，它主要包含samba(文件共享), ftp, upnp/dlna, 远程下载等功能。 本系列主要分为以下几部分：Orange Pi搭建NAS(1)-开坑Orange Pi搭建NAS(2)-硬件选择与组装Orange Pi搭建NAS(3)-系统安装Orange Pi搭建NAS(4)-存储设备Orange Pi搭建NAS(5)-UPNP/DLNA流媒体Orange Pi搭建NAS(6)-文件共享Orange Pi搭建NAS(7)-Aria2远程下载Orange Pi搭建NAS(8)-外网连接香橙派"},{"title":"香橙派快速开启AP","date":"2017-07-04T15:50:15.000Z","url":"/e9-a6-99-e6-a9-99-e6-b4-be-e5-bf-ab-e9-80-9f-e5-bc-80-e5-90-afap.html","tags":["Orange Pi","debian，香橙派，ap"],"categories":["折腾记录"],"content":"由于学校网络太渣，手机wifi信号不好于是我入手香橙派lite，但想要在香橙派，树莓派的Linux系统上开启ap，由于香橙派树莓派开启ap步骤繁琐，于是便请求google，发现了create_ap这个好软件。一、安装依赖注:由于各种系统软件不一，如果提示安装问题去掉即可，debian没有问题二、安装create_ap  注:如果提示未找到git命令请安装git三、开启wifi没有加密的ap开启wpa wpa2加密的ap其他"},{"title":"本博客评论规则","date":"2017-07-01T16:00:06.000Z","url":"/blog-comment-rules.html","categories":["未分类"],"content":"基础规则可评论的内容关于博客文章的内容，包括提问，建议等。类似博客文章的内容，包括链接。博客文章提到的内容的延伸。关于技术类的内容。正常交谈的内容，如 问好 等。日常串门等。不允许评论的内容任何广告，与博客文章无关或非技术类的内容。(SPAM)不适合在工作时间或公共场合查看的内容。(NSFW)任何关于恐怖主义等极端内容，脱离社会道德的内容任何含有侮辱他人倾向的内容。若评论者使用我个人判定为垃圾评论的昵称或不合理的链接（指向不良网站，广告站等），那就抱歉了，小黑屋见。留言板规则留言板评论自由，但不允许上方不可评论内容的出现。其他规则由于网络问题，提交后会有一段等待时间，评论者不妨等待一下，若多次提交，即多次提交的内容相近或相同时，博主会视情况保留最长的评论或保留最新的评论，并删除其他多次提交的评论，敬请谅解。规则可能会更改，视评论情况而定。Otstar Lin有权在不通知评论者的情况下修改或删除评论者的评论。Otstar Lin有权在不通知评论者的情况下将评论者送进小黑屋。一旦评论同时符合可接受和不可接受，Otstar Lin将视情况修改或删除评论。评论自动回复的邮箱是常用邮箱，请不要将评论的回复通过邮件回复我。一切无关博客文章的内容请尽量到留言板评论。访客在本博客评论即说明已经同意以上评论规则，若您不同意以上规则请不要留下评论。"},{"title":"世界，您好！","date":"2017-06-30T16:40:48.000Z","url":"/hello-world-2-2.html","categories":["未分类"],"content":"留存此篇文章不是因为懒，这篇文章见证了我博客搭建成功的时间(≧▽≦)"}]